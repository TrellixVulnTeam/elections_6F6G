{"ast":null,"code":"/**\n * Bundle of @devexpress/dx-chart-core\n * Generated: 2022-05-11\n * Version: 3.0.3\n * License: https://js.devexpress.com/Licensing\n */\nimport { extent } from 'd3-array';\nimport { scaleLinear as scaleLinear$1, scaleBand as scaleBand$1 } from 'd3-scale';\nimport { area, line, curveMonotoneX, curveMonotoneY, pie, symbol, symbolCircle, arc, stack } from 'd3-shape';\nimport { hasWindow } from '@devexpress/dx-core';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n/** @deprecated */\n\n\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n}\n/** @internal */\n\n\nvar HORIZONTAL = 'horizontal';\n/** @internal */\n\nvar VERTICAL = 'vertical';\n/** @internal */\n\nvar TOP = 'top';\n/** @internal */\n\nvar BOTTOM = 'bottom';\n/** @internal */\n\nvar LEFT = 'left';\n/** @internal */\n\nvar RIGHT = 'right';\n/** @internal */\n\nvar MIDDLE = 'middle';\n/** @internal */\n\nvar END = 'end';\n/** @internal */\n\nvar START = 'start';\n/** @internal */\n\nvar LINEAR = 'linear';\n/** @internal */\n\nvar BAND = 'band';\n/** @internal */\n\nvar ARGUMENT_DOMAIN = 'argument-domain';\n/** @internal */\n\nvar VALUE_DOMAIN = 'value-domain';\n/** @internal */\n\nvar HOVERED = 'hovered';\n/** @internal */\n\nvar SELECTED = 'selected';\n/** @internal */\n\nvar DIFFERENCE = 3;\n/** @internal */\n\nvar scaleLinear = scaleLinear$1;\n\nvar scaleBand = function () {\n  return scaleBand$1().paddingInner(0.3).paddingOuter(0.15);\n};\n/** @internal */\n\n\nvar isHorizontal = function (name, rotated) {\n  return name === ARGUMENT_DOMAIN === !rotated;\n}; // tslint:disable-next-line: ban-types\n\n\nvar makeScaleHelper = function (linear, band) {\n  var func = function (scale) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var choosen = 'bandwidth' in scale ? band : linear;\n    return choosen.apply(void 0, __spread([scale], args));\n  };\n\n  return func;\n};\n\nvar getLinearScaleWidth = function (_) {\n  return 0;\n};\n\nvar getBandScaleWidth = function (scale) {\n  return scale.bandwidth();\n};\n/** @internal */\n\n\nvar getWidth = makeScaleHelper(getLinearScaleWidth, getBandScaleWidth);\n/** @internal */\n\nvar getValueDomainName = function (name) {\n  return name || VALUE_DOMAIN;\n};\n\nvar floatsEqual = function (a, b) {\n  return Math.abs(a - b) < Number.EPSILON;\n};\n/** @internal */\n\n\nvar rangesEqual = function (r1, r2) {\n  return floatsEqual(r1[0], r2[0]) && floatsEqual(r1[1], r2[1]);\n};\n\nvar wrapLinearScale = function (scale) {\n  return scale;\n};\n\nvar wrapBandScale = function (scale) {\n  var ret = function (value) {\n    return scale(value) + scale.bandwidth() / 2;\n  };\n\n  Object.assign(ret, scale);\n  return ret;\n};\n\nvar wrapScale = makeScaleHelper(wrapLinearScale, wrapBandScale);\n/** @internal */\n\nvar makeScale = function (_a, range) {\n  var factory = _a.factory,\n      domain = _a.domain;\n  var scale = (factory || scaleLinear)().domain(domain).range(range);\n  return wrapScale(scale);\n}; // It is implicitly supposed that Chart can accept any d3 scale. It is wrong.\n// The followings notes show that. d3 scales are not seamlessly interchangeable themselves\n// (i.e. band scale has no \"invert\", continuous scale has no \"bandwidth\").\n// We have to use \"adapters\" to mitigate the differences.\n// Hence Chart can actually accept any object that matches \"adapter\" interface.\n// TODO: We should update reference accordingly. There might be breaking changes though.\n\n\nvar scaleLinearBounds = function (scale, bounds) {\n  return bounds.map(scale);\n}; // There is an issue - when range is \"inverted\" values are scaled incorrectly.\n//   scaleBand().domain(['a', 'b', 'c']).range([0, 60])('b') === 20\n//   scaleBand().domain(['a', 'b', 'c']).range([60, 0])('b') === 20 (should be 40)\n\n\nvar scaleBandBounds = function (scale, bounds) {\n  var cleanScale = scale.copy().paddingInner(0).paddingOuter(0);\n  var fullRange = scale.range();\n  var sign = Math.sign(fullRange[1] - fullRange[0]);\n  return sign >= 0 ? [cleanScale(bounds[0]), cleanScale(bounds[1]) + cleanScale.bandwidth()] : [cleanScale(bounds[0]) + cleanScale.bandwidth(), cleanScale(bounds[1])];\n};\n\nvar moveLinearScaleBounds = function (scale, bounds, delta) {\n  var fullRange = scale.range();\n  var sign = Math.sign(fullRange[1] - fullRange[0]);\n  var range = scaleLinearBounds(scale, bounds);\n  var r0 = range[0] + delta;\n  var r1 = range[1] + delta; // Check if new range is outside of the left border.\n\n  if (Math.sign(r0 - fullRange[0]) !== sign) {\n    r0 = fullRange[0];\n    r1 = r0 + range[1] - range[0];\n  } // Check if new range is outside of the right border.\n\n\n  if (Math.sign(fullRange[1] - r1) !== sign) {\n    r1 = fullRange[1];\n    r0 = r1 - range[1] + range[0];\n  }\n\n  var newBounds = [scale.invert(r0), scale.invert(r1)];\n  return rangesEqual(bounds, newBounds) ? bounds : newBounds;\n}; // This is pointer \"delta\" processing specific for \"band\" scale.\n// If pointer delta is significantly smaller than band size (0.3) then movement should be skipped\n// and current delta should be added to a next one (from a new \"move\" event).\n// Now there is no code that accumulates deltas.\n// In order to allow band scrolling at least somehow the following is applied - if pointer delta\n// is at least greater than 30 pixel then minimal movement is performed.\n// TODO: Make proper delta accumulation!\n\n\nvar adjustBandScaleMoveStep = function (delta, step) {\n  var ratio = Math.abs(delta / step);\n  var sign = Math.sign(delta / step);\n\n  if (ratio >= 0.5) {\n    return sign * Math.round(ratio);\n  }\n\n  if (ratio >= 0.3) {\n    return sign;\n  }\n\n  if (Math.abs(delta) > 30) {\n    return sign;\n  }\n\n  return 0;\n}; // Band case is processed separately to preserve categories count in the bounds range.\n// If common inversion mechanism is used start and end bounds cannot be inverted independently\n// because of rounding issues which may add or remove categories to the new bounds.\n\n\nvar moveBandScaleBounds = function (scale, bounds, delta) {\n  var domain = scale.domain();\n  var fullRange = scale.range();\n  var step = (fullRange[1] - fullRange[0]) / domain.length;\n  var rangeStep = adjustBandScaleMoveStep(delta, step);\n\n  if (rangeStep === 0) {\n    return bounds;\n  }\n\n  var range = scaleBounds(scale, bounds);\n  var range0 = Math.round((range[0] - fullRange[0]) / step);\n  var range1 = range0 + Math.round((range[1] - range[0]) / step) - 1;\n  var new0 = range0 + rangeStep;\n  var new1 = range1 + rangeStep;\n\n  if (new0 < 0) {\n    new0 = 0;\n    new1 = new0 + range1 - range0;\n  }\n\n  if (new1 > domain.length - 1) {\n    new1 = domain.length - 1;\n    new0 = new1 - range1 + range0;\n  }\n\n  if (new0 === range0 || new1 === range1) {\n    return bounds;\n  }\n\n  return [domain[new0], domain[new1]];\n}; // Defines how much linear scale can be zoomed it.\n// I.e. if original scale domain has size of 1, then fully zoomed scale domain has size\n// of 1 / LINEAR_SCALE_ZOOMING_THRESHOLD.\n\n\nvar LINEAR_SCALE_ZOOMING_THRESHOLD = 1000;\n\nvar growLinearScaleBounds = function (scale, bounds, delta, anchor) {\n  var fullRange = scale.range();\n  var minRangeThreshold = (fullRange[1] - fullRange[0]) / LINEAR_SCALE_ZOOMING_THRESHOLD;\n  var sign = Math.sign(fullRange[1] - fullRange[0]);\n  var range = scaleBounds(scale, bounds); // If zooming in and initial range is already too small then do nothing.\n\n  if (delta > 0 && Math.abs(range[1] - range[0]) <= Math.abs(minRangeThreshold)) {\n    return bounds;\n  } // If zooming out and initial range is already too large then do nothing.\n\n\n  if (delta < 0 && Math.abs(range[1] - range[0]) >= Math.abs(fullRange[1] - fullRange[0])) {\n    return bounds;\n  }\n\n  var t = Math.abs((anchor - range[0]) / (range[1] - range[0]));\n  var r0 = range[0] + sign * delta * 2 * t;\n  var r1 = range[1] - sign * delta * 2 * (1 - t); // If new range is outside of the left border then clamp it.\n\n  if (Math.sign(r0 - fullRange[0]) !== sign) {\n    r0 = fullRange[0];\n  } // If new range is outside of the right border then clamp it.\n\n\n  if (Math.sign(fullRange[1] - r1) !== sign) {\n    r1 = fullRange[1];\n  } // If new range is too small then make it no less than minimal available.\n\n\n  if (Math.sign(r1 - r0) !== sign || Math.abs(r1 - r0) < Math.abs(minRangeThreshold)) {\n    if (Math.abs(r0 - range[0]) < Math.abs(minRangeThreshold / 2)) {\n      // Dock it to the start.\n      r0 = range[0];\n      r1 = r0 + minRangeThreshold;\n    } else if (Math.abs(r1 - range[1]) < Math.abs(minRangeThreshold / 2)) {\n      // Dock it to the end.\n      r1 = range[1];\n      r0 = r1 - minRangeThreshold;\n    } else {\n      // Dock it to the anchor.\n      r0 = anchor - minRangeThreshold / 2;\n      r1 = anchor + minRangeThreshold / 2;\n    }\n  }\n\n  var newBounds = [scale.invert(r0), scale.invert(r1)];\n  return rangesEqual(bounds, newBounds) ? bounds : newBounds;\n};\n\nvar growBandScaleBounds = function (scale, bounds, delta, anchor) {\n  var domain = scale.domain();\n  var fullRange = scale.range();\n  var step = (fullRange[1] - fullRange[0]) / domain.length;\n  var range = scaleBounds(scale, bounds);\n  var range0 = Math.round((range[0] - fullRange[0]) / step);\n  var range1 = range0 + Math.round((range[1] - range[0]) / step) - 1; // Let it be always 1 for now.\n\n  var rangeStep = Math.sign(delta);\n\n  if (rangeStep === 0 || rangeStep > 0 && range0 === range1 || rangeStep < 0 && range0 === 0 && range1 === domain.length - 1) {\n    return bounds;\n  }\n\n  var t = Math.abs((anchor - range[0]) / (range[1] - range[0]));\n  var new0 = range0 + Math.round(rangeStep * 2 * t);\n  var new1 = range1 - Math.round(rangeStep * 2 * (1 - t));\n\n  if (new0 < 0) {\n    new0 = 0;\n  }\n\n  if (new1 > domain.length - 1) {\n    new1 = domain.length - 1;\n  }\n\n  if (new0 > new1) {\n    if (t <= 0.5) {\n      new1 = new0;\n    } else {\n      new0 = new1;\n    }\n  }\n\n  if (new0 === range0 && new1 === range1) {\n    return bounds;\n  }\n\n  return [domain[new0], domain[new1]];\n};\n\nvar invertLinearScaleBounds = function (scale, range) {\n  var fullRange = scale.range();\n  var match = Math.sign(fullRange[1] - fullRange[0]) === Math.sign(range[1] - range[0]);\n  return [scale.invert(range[match ? 0 : 1]), scale.invert(range[match ? 1 : 0])];\n};\n\nvar matchPointToBand = function (domain, range, p) {\n  var i = Math.floor(domain.length * (p - range[0]) / (range[1] - range[0]));\n  return domain[Math.min(i, domain.length - 1)];\n};\n\nvar invertBandScaleBounds = function (scale, range) {\n  var domain = scale.domain();\n  var fullRange = scale.range();\n  return [matchPointToBand(domain, fullRange, range[0]), matchPointToBand(domain, fullRange, range[1])];\n}; // Though these functions are used only in *Viewport* plugin (and so should be placed right there),\n// they reside here so that internal scale specifics (*getWidth*)\n// are encapsulated in this utility file.\n\n/** @internal */\n\n\nvar scaleBounds = makeScaleHelper(scaleLinearBounds, scaleBandBounds);\n/** @internal */\n\nvar moveBounds = makeScaleHelper(moveLinearScaleBounds, moveBandScaleBounds); // \"scaleBounds\" would be a better name but \"scale\" is already occupied.\n\n/** @internal */\n\nvar growBounds = makeScaleHelper(growLinearScaleBounds, growBandScaleBounds);\n/** @internal */\n\nvar invertBoundsRange = makeScaleHelper(invertLinearScaleBounds, invertBandScaleBounds);\n\nvar _a;\n\nvar makeDomain = function (_a) {\n  var factory = _a.factory,\n      modifyDomain = _a.modifyDomain;\n  return {\n    domain: [],\n    factory: factory,\n    isDiscrete: !!(factory && isDiscrete(factory)),\n    modifyDomain: modifyDomain\n  };\n};\n/** @internal */\n\n\nvar defaultDomains = (_a = {}, _a[ARGUMENT_DOMAIN] = makeDomain({}), _a[VALUE_DOMAIN] = makeDomain({}), _a);\n/** @internal */\n\nvar addDomain = function (domains, name, options) {\n  var _a;\n\n  return __assign(__assign({}, domains), (_a = {}, _a[name] = makeDomain(options), _a));\n};\n\nvar mergeContinuousDomains = function (domain, items) {\n  var newDomain = extent(__spread(domain, items));\n  return rangesEqual(newDomain, domain) ? domain : newDomain;\n};\n\nvar mergeDiscreteDomains = function (domain, items) {\n  var newDomain = Array.from(new Set(__spread(domain, items)));\n  return newDomain.length === domain.length ? domain : newDomain;\n};\n\nvar getArgument = function (point) {\n  return point.argument;\n};\n\nvar getValue = function (point) {\n  return point.value;\n};\n\nvar guessFactory = function (points, getItem) {\n  return points.length && typeof getItem(points[0]) === 'string' ? scaleBand : scaleLinear;\n};\n\nvar isDiscrete = function (factory) {\n  return 'bandwidth' in factory();\n};\n\nvar updateDomainFactory = function (domain, series, getItem) {\n  if (domain.factory) {\n    return domain;\n  }\n\n  var factory = guessFactory(series.points, getItem);\n  return __assign(__assign({}, domain), {\n    factory: factory,\n    isDiscrete: isDiscrete(factory)\n  });\n};\n/** @internal */\n\n\nvar updateDomainItems = function (domain, items) {\n  var merge = domain.isDiscrete ? mergeDiscreteDomains : mergeContinuousDomains;\n  var merged = merge(domain.domain, items);\n  return merged === domain.domain ? domain : __assign(__assign({}, domain), {\n    domain: domain.modifyDomain ? domain.modifyDomain(merged) : merged\n  });\n};\n\nvar getArgumentDomainItems = function (series) {\n  return series.points.map(getArgument);\n};\n\nvar getValueDomainItems = function (series) {\n  var items = series.points.map(getValue);\n  return series.getPointTransformer.isStartedFromZero ? __spread([0], items) : items;\n};\n\nvar updateDomain = function (domain, series, getItem, getDomainItems) {\n  return updateDomainItems(updateDomainFactory(domain, series, getItem), getDomainItems(series));\n};\n/** @internal */\n\n\nvar extendDomains = function (domains, series) {\n  var argumentDomain = updateDomain(domains[ARGUMENT_DOMAIN], series, getArgument, getArgumentDomainItems);\n  var valueDomainName = getValueDomainName(series.scaleName);\n  var valueDomain = updateDomain(domains[valueDomainName], series, getValue, getValueDomainItems);\n  var changes = {};\n\n  if (argumentDomain !== domains[ARGUMENT_DOMAIN]) {\n    changes[ARGUMENT_DOMAIN] = argumentDomain;\n  }\n\n  if (valueDomain !== domains[valueDomainName]) {\n    changes[valueDomainName] = valueDomain;\n  }\n\n  return Object.keys(changes).length ? __assign(__assign({}, domains), changes) : domains;\n};\n/** @internal */\n\n\nvar buildScales = function (domains, ranges) {\n  var scales = {};\n  Object.keys(domains).forEach(function (name) {\n    scales[name] = makeScale(domains[name], ranges[name === ARGUMENT_DOMAIN ? ARGUMENT_DOMAIN : VALUE_DOMAIN]);\n  });\n  return scales;\n};\n\nvar isEqual = function (_a, _b) {\n  var firstWidth = _a.width,\n      firstHeight = _a.height;\n  var secondWidth = _b.width,\n      secondHeight = _b.height;\n  return firstWidth === secondWidth && firstHeight === secondHeight;\n};\n/** @internal */\n\n\nvar bBoxes = function (prevBBoxes, _a) {\n  var _b;\n\n  var bBox = _a.bBox,\n      placeholder = _a.placeholder;\n  if (isEqual(prevBBoxes[placeholder] || {}, bBox)) return prevBBoxes;\n  return __assign(__assign({}, prevBBoxes), (_b = {}, _b[placeholder] = bBox, _b));\n};\n/** @internal */\n\n\nvar getRanges = function (paneSize, rotated) {\n  var _a;\n\n  var horRange = [0, paneSize.width];\n  var verRange = [paneSize.height, 0];\n  return _a = {}, _a[ARGUMENT_DOMAIN] = rotated ? verRange : horRange, _a[VALUE_DOMAIN] = rotated ? horRange : verRange, _a;\n};\n\nvar _a$1, _b;\n\nvar getTicks = function (scale, count) {\n  return scale.ticks ? scale.ticks(count) : scale.domain();\n};\n\nvar createTicks = function (scale, count, callback) {\n  return getTicks(scale, count).map(function (tick, index) {\n    return callback(scale(tick), String(index), tick);\n  });\n};\n\nvar getFormat = function (scale, count, tickFormat) {\n  if (scale.tickFormat) {\n    return tickFormat ? tickFormat(scale, count) : scale.tickFormat(count);\n  }\n\n  return function (tick) {\n    return tick;\n  };\n};\n\nvar rotatedPositions = (_a$1 = {}, _a$1[LEFT] = BOTTOM, _a$1[RIGHT] = TOP, _a$1[BOTTOM] = LEFT, _a$1[TOP] = RIGHT, _a$1);\nvar positionFlags = (_b = {}, _b[LEFT] = false, _b[RIGHT] = false, _b[BOTTOM] = true, _b[TOP] = true, _b);\n/** @internal */\n\nvar getRotatedPosition = function (position) {\n  return rotatedPositions[position];\n};\n/** @internal */\n\n\nvar isValidPosition = function (position, scaleName, rotated) {\n  return positionFlags[position] === isHorizontal(scaleName, rotated);\n};\n\nvar createHorizontalOptions = function (position, tickSize, indentFromAxis) {\n  // Make *position* orientation agnostic - should be START or END.\n  var isStart = position === BOTTOM;\n  return {\n    y1: 0,\n    y2: isStart ? +tickSize : -tickSize,\n    yText: isStart ? +indentFromAxis : -indentFromAxis,\n    dy: isStart ? '1em' : '0em',\n    textAnchor: MIDDLE\n  };\n};\n\nvar createVerticalOptions = function (position, tickSize, indentFromAxis) {\n  // Make *position* orientation agnostic - should be START or END.\n  var isStart = position === LEFT;\n  return {\n    x1: 0,\n    x2: isStart ? -tickSize : +tickSize,\n    xText: isStart ? -indentFromAxis : +indentFromAxis,\n    dy: '0.3em',\n    textAnchor: isStart ? END : START\n  };\n}; // Constant is selected to preserve original behavior described in\n// https://github.com/d3/d3-scale#continuous_ticks.\n\n\nvar DEFAULT_TICK_COUNT = 10;\n\nvar getTickCount = function (scaleRange, paneSize) {\n  var rangeToPaneRatio = Math.abs(scaleRange[0] - scaleRange[1]) / paneSize;\n  return Math.round(DEFAULT_TICK_COUNT * (isFinite(rangeToPaneRatio) ? rangeToPaneRatio : 1));\n};\n\nvar createTickFilter = function (isHor, size) {\n  return isHor ? function (tick) {\n    return tick.x1 >= 0 && tick.x1 <= size;\n  } : function (tick) {\n    return tick.y1 >= 0 && tick.y1 <= size;\n  };\n};\n/** @internal */\n\n\nvar tickCoordinatesGetter = function (_a) {\n  var isHor = _a.isHor,\n      scale = _a.scale,\n      tickCount = _a.tickCount,\n      tickFormat = _a.tickFormat,\n      position = _a.position,\n      tickSize = _a.tickSize,\n      indentFromAxis = _a.indentFromAxis;\n  var formatTick = getFormat(scale, tickCount, tickFormat);\n  var options = (isHor ? createHorizontalOptions : createVerticalOptions)(position, tickSize, indentFromAxis);\n  return function (coordinates, key, tick) {\n    return __assign({\n      key: key,\n      x1: coordinates,\n      x2: coordinates,\n      y1: coordinates,\n      y2: coordinates,\n      xText: coordinates,\n      yText: coordinates,\n      text: formatTick(tick)\n    }, options);\n  };\n};\n/** @internal */\n\n\nvar gridCoordinatesGetter = function (_a) {\n  var isHor = _a.isHor;\n  var options = isHor ? {\n    y1: 0\n  } : {\n    x1: 0\n  };\n  return function (coordinates, key) {\n    return __assign({\n      key: key,\n      x1: coordinates,\n      y1: coordinates\n    }, options);\n  };\n};\n/** @internal */\n\n\nvar getTickCoordinates = function (_a) {\n  var scaleName = _a.scaleName,\n      scale = _a.scale,\n      paneSize = _a.paneSize,\n      rotated = _a.rotated,\n      callback = _a.callback,\n      restProps = __rest(_a, [\"scaleName\", \"scale\", \"paneSize\", \"rotated\", \"callback\"]);\n\n  var isHor = isHorizontal(scaleName, rotated);\n  var tickCount = getTickCount(scale.range(), paneSize[1 - Number(isHor)]);\n  var ticks = createTicks(scale, tickCount, callback(__assign({\n    isHor: isHor,\n    scale: scale,\n    tickCount: tickCount\n  }, restProps)));\n  var visibleTicks = ticks.filter(createTickFilter(isHor, paneSize[1 - Number(isHor)]));\n  return {\n    ticks: visibleTicks,\n    sides: [Number(isHor), Number(!isHor)]\n  };\n};\n\nvar getArg = function (_a) {\n  var arg = _a.arg;\n  return arg;\n};\n\nvar getVal = function (_a) {\n  var val = _a.val;\n  return val;\n};\n\nvar getStartVal = function (_a) {\n  var startVal = _a.startVal;\n  return startVal;\n};\n/** @internal */\n\n\nvar dArea = area().x(getArg).y1(getVal).y0(getStartVal);\n/** @internal */\n\nvar dRotateArea = area().x1(getStartVal).x0(getVal).y(getArg);\n/** @internal */\n\nvar dLine = line().x(getArg).y(getVal);\n/** @internal */\n\nvar dRotateLine = line().x(getVal).y(getArg);\n/** @internal */\n\nvar dSpline = line().x(getArg).y(getVal).curve(curveMonotoneX);\n/** @internal */\n\nvar dRotateSpline = line().x(getVal).y(getArg).curve(curveMonotoneY);\n/** @internal */\n\nvar dBar = function (arg, val, startVal, width, rotated) {\n  var height = Math.abs(val - startVal);\n  var minVal = Math.min(val, startVal);\n  return {\n    x: rotated ? minVal : arg - width / 2,\n    y: rotated ? arg - width / 2 : minVal,\n    width: rotated ? height : width || 2,\n    height: rotated ? width || 2 : height\n  };\n};\n/** @internal */\n\n\nvar getPiePointTransformer = function (_a) {\n  var argumentScale = _a.argumentScale,\n      valueScale = _a.valueScale,\n      points = _a.points;\n  var x = Math.max.apply(Math, __spread(argumentScale.range())) / 2;\n  var y = Math.max.apply(Math, __spread(valueScale.range())) / 2;\n  var maxRadius = Math.min(x, y);\n  var pieData = pie().sort(null).value(function (d) {\n    return d.value;\n  })(points);\n  return function (point) {\n    var _a = pieData[point.index],\n        startAngle = _a.startAngle,\n        endAngle = _a.endAngle;\n    return __assign(__assign({}, point), {\n      arg: x,\n      val: y,\n      startAngle: startAngle,\n      endAngle: endAngle,\n      maxRadius: maxRadius\n    });\n  };\n};\n/** @internal */\n\n\nvar getLinePointTransformer = function (_a) {\n  var argumentScale = _a.argumentScale,\n      valueScale = _a.valueScale;\n  return function (point) {\n    return __assign(__assign({}, point), {\n      arg: argumentScale(point.argument),\n      val: valueScale(point.value)\n    });\n  };\n}; // Though transformations for line and scatter are the same,\n// separate function instance is required as it contains additional static fields.\n\n/** @internal */\n\n\nvar getScatterPointTransformer = function () {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return getLinePointTransformer.apply(void 0, __spread(args));\n};\n/** @internal */\n\n\nvar getAreaPointTransformer = function (series) {\n  var transform = getLinePointTransformer(series);\n  var startVal = series.valueScale(0);\n  return function (point) {\n    var ret = transform(point);\n    return __assign(__assign({}, ret), {\n      startVal: startVal\n    });\n  };\n}; // Used for domain calculation and stacking.\n\n\ngetAreaPointTransformer.isStartedFromZero = true;\n/** @internal */\n\nvar getBarPointTransformer = function (_a) {\n  var argumentScale = _a.argumentScale,\n      valueScale = _a.valueScale;\n  var startVal = valueScale(0);\n  return function (point) {\n    return __assign(__assign({}, point), {\n      arg: argumentScale(point.argument),\n      val: valueScale(point.value),\n      startVal: startVal,\n      maxBarWidth: getWidth(argumentScale)\n    });\n  };\n}; // Used for domain calculation and stacking.\n\n\ngetBarPointTransformer.isStartedFromZero = true; // Used for Bar grouping.\n\ngetBarPointTransformer.isBroad = true;\n\ngetPiePointTransformer.getPointColor = function (palette, index) {\n  return palette[index % palette.length];\n};\n/** @internal */\n\n\nvar findSeriesByName = function (name, series) {\n  return series.find(function (seriesItem) {\n    return seriesItem.symbolName === name;\n  });\n};\n/** @internal */\n\n\nvar dSymbol = function (_a) {\n  var size = _a.size;\n  return symbol().size(Math.pow(size, 2)).type(symbolCircle)();\n};\n/** @internal */\n\n\nvar dPie = function (maxRadius, innerRadius, outerRadius, startAngle, endAngle) {\n  return arc()({\n    startAngle: startAngle,\n    endAngle: endAngle,\n    innerRadius: innerRadius * maxRadius,\n    outerRadius: outerRadius * maxRadius\n  });\n};\n\nvar getRect = function (cArg, cVal, dArg, dVal, rotated) {\n  var minArg = cArg - dArg;\n  var minVal = cVal - dVal;\n  var maxArg = cArg + dArg;\n  var maxVal = cVal + dVal;\n  return rotated ? [minVal, minArg, maxVal, maxArg] : [minArg, minVal, maxArg, maxVal];\n};\n\ngetBarPointTransformer.getTargetElement = function (point) {\n  var _a = point,\n      arg = _a.arg,\n      val = _a.val,\n      startVal = _a.startVal,\n      barWidth = _a.barWidth,\n      maxBarWidth = _a.maxBarWidth,\n      rotated = _a.rotated;\n  var halfWidth = barWidth * maxBarWidth / 2;\n  var halfHeight = Math.abs(startVal - val) / 2;\n  var centerVal = (val + startVal) / 2;\n  return getRect(arg, centerVal, halfWidth, halfHeight, rotated);\n};\n\ngetPiePointTransformer.getTargetElement = function (point) {\n  var _a = point,\n      x = _a.arg,\n      y = _a.val,\n      innerRadius = _a.innerRadius,\n      outerRadius = _a.outerRadius,\n      maxRadius = _a.maxRadius,\n      startAngle = _a.startAngle,\n      endAngle = _a.endAngle;\n  var center = arc().centroid({\n    startAngle: startAngle,\n    endAngle: endAngle,\n    innerRadius: innerRadius * maxRadius,\n    outerRadius: outerRadius * maxRadius\n  });\n  var cx = center[0] + x;\n  var cy = center[1] + y;\n  return getRect(cx, cy, 0.5, 0.5, false);\n};\n\ngetAreaPointTransformer.getTargetElement = function (_a) {\n  var arg = _a.arg,\n      val = _a.val,\n      rotated = _a.rotated;\n  return getRect(arg, val, 1, 1, rotated);\n};\n\ngetLinePointTransformer.getTargetElement = getAreaPointTransformer.getTargetElement;\n\ngetScatterPointTransformer.getTargetElement = function (obj) {\n  var _a = obj,\n      arg = _a.arg,\n      val = _a.val,\n      point = _a.point,\n      rotated = _a.rotated;\n  var t = point.size / 2;\n  return getRect(arg, val, t, t, rotated);\n};\n\nvar getUniqueName = function (list, name) {\n  var names = new Set(list.map(function (item) {\n    return item.name;\n  }));\n  var ret = name;\n\n  while (names.has(ret)) {\n    // @ts-ignore\n    ret = ret.replace(/\\d*$/, function (str) {\n      return str ? +str + 1 : 0;\n    });\n  }\n\n  return ret;\n}; // TODO: Memoization is much needed here.\n// Though \"series\" list never persists, single \"series\" item most often does.\n\n\nvar createPoints = function (_a, data, props, palette) {\n  var argumentField = _a.argumentField,\n      valueField = _a.valueField,\n      getPointTransformer = _a.getPointTransformer;\n  var points = [];\n  data.forEach(function (dataItem, index) {\n    var argument = dataItem[argumentField];\n    var value = dataItem[valueField];\n\n    if (argument !== undefined && value !== undefined) {\n      points.push(__assign(__assign({\n        argument: argument,\n        value: value,\n        index: index\n      }, props), {\n        color: getPointTransformer.getPointColor ? getPointTransformer.getPointColor(palette, index) : props.color\n      }));\n    }\n  });\n  return points;\n};\n/** @internal */\n\n\nvar addSeries = function (series, data, palette, props, restProps) {\n  // It is used to generate unique series dependent attribute names for patterns.\n  // *symbolName* cannot be used as it cannot be part of DOM attribute name.\n  var index = series.length;\n  var seriesColor = props.color || palette[index % palette.length];\n  return __spread(series, [__assign(__assign({}, props), {\n    index: index,\n    name: getUniqueName(series, props.name),\n    points: createPoints(props, data, __assign(__assign({}, restProps), {\n      color: seriesColor\n    }), palette),\n    color: seriesColor\n  })]);\n}; // TODO: Memoization is much needed here by the same reason as in \"createPoints\".\n// Make \"scales\" persistent first.\n\n\nvar scalePoints = function (series, scales, rotated) {\n  var transform = series.getPointTransformer(__assign(__assign({}, series), {\n    argumentScale: scales[ARGUMENT_DOMAIN],\n    valueScale: scales[getValueDomainName(series.scaleName)]\n  }));\n\n  var ret = __assign(__assign({}, series), {\n    rotated: rotated,\n    points: series.points.map(function (point) {\n      return __assign(__assign({}, transform(point)), {\n        rotated: rotated\n      });\n    })\n  });\n\n  return ret;\n};\n/** @internal */\n\n\nvar scaleSeriesPoints = function (series, scales, rotated) {\n  return series.map(function (seriesItem) {\n    return scalePoints(seriesItem, scales, rotated);\n  });\n};\n/** @internal */\n\n\nvar getVisibility = function (pane, centerX, centerY, width, height) {\n  return centerX - width / 2 < 0 && centerX + width / 2 < 0 || centerX - width / 2 > pane.width && centerX + width / 2 > pane.width || centerY - height / 2 < 0 && centerY + height / 2 < 0 || centerY - height / 2 > pane.height && centerY + height / 2 > pane.height ? 'hidden' : 'visible';\n};\n/** @internal */\n\n\nvar adjustBarSize = function (bar, _a) {\n  var width = _a.width,\n      height = _a.height;\n  var x = Math.max(0, bar.x);\n  var y = Math.max(0, bar.y);\n  return {\n    x: x,\n    y: y,\n    width: Math.min(width, bar.x + bar.width) - x,\n    height: Math.min(height, bar.y + bar.height) - y\n  };\n};\n/** @internal */\n\n\nvar isValuesChanged = function (previous, current) {\n  return Object.entries(previous).some(function (el) {\n    return el[1] !== current[el[0]];\n  });\n};\n/** @internal */\n\n\nvar isCoordinatesChanged = function (_a, _b) {\n  var prevCoordinates = _a.coordinates;\n  var coordinates = _b.coordinates;\n\n  if (prevCoordinates.length !== coordinates.length) {\n    return true;\n  }\n\n  return prevCoordinates.some(function (el, index) {\n    return el.arg !== coordinates[index].arg || el.val !== coordinates[index].val;\n  });\n};\n/** @internal */\n\n\nvar isScalesChanged = function (previous, current) {\n  return !rangesEqual(previous.argScale.range(), current.argScale.range()) || !rangesEqual(previous.valScale.range(), current.valScale.range());\n}; // \"Stack\" plugin relies on \"data\" and \"series\" getters and\n// knowledge about \"getPointTransformer\" and \"path\" functions behavior.\n\n\nvar buildSeriesToStackMap = function (stacks) {\n  var result = {};\n  stacks.forEach(function (_a, i) {\n    var series = _a.series;\n    series.forEach(function (name) {\n      result[name] = i;\n    });\n  });\n  return result;\n};\n\nvar getStackedPointTransformer = function (getPointTransformer) {\n  var wrapper = function (series) {\n    var transform = getPointTransformer(series);\n    var valueScale = series.valueScale;\n    return function (point) {\n      var ret = transform(point);\n      return __assign(__assign({}, ret), {\n        startVal: valueScale(point.value0)\n      });\n    };\n  }; // Preserve static fields of original transformer.\n\n\n  Object.assign(wrapper, getPointTransformer);\n  return wrapper;\n};\n\nvar collectStacks = function (seriesList, seriesToStackMap, stacksKeys, seriesPositions) {\n  seriesList.forEach(function (_a) {\n    var name = _a.name,\n        valueField = _a.valueField;\n    var stackId = seriesToStackMap[name];\n\n    if (stackId === undefined) {\n      return;\n    }\n\n    if (!stacksKeys[stackId]) {\n      stacksKeys[stackId] = [];\n    }\n\n    seriesPositions[name] = stacksKeys[stackId].length;\n    stacksKeys[stackId].push(valueField);\n  }); // Stack cannot consist of single series.\n\n  Object.keys(stacksKeys).forEach(function (stackId) {\n    if (stacksKeys[stackId].length === 1) {\n      delete stacksKeys[stackId];\n    }\n  });\n};\n\nvar getStackedData = function (stacksKeys, dataItems, offset, order) {\n  var result = {};\n  Object.keys(stacksKeys).forEach(function (stackId) {\n    result[stackId] = stack().keys(stacksKeys[stackId]).order(order).offset(offset)(dataItems);\n  });\n  return result;\n};\n\nvar buildStackedSeries = function (series, dataItems) {\n  var points = series.points.map(function (point) {\n    var _a = __read(dataItems[point.index], 2),\n        value0 = _a[0],\n        value = _a[1];\n\n    return __assign(__assign({}, point), {\n      value: value,\n      value0: value0\n    });\n  });\n\n  var stackedSeries = __assign(__assign({}, series), {\n    points: points,\n    isStacked: true\n  });\n\n  if (series.getPointTransformer.isStartedFromZero) {\n    stackedSeries.getPointTransformer = getStackedPointTransformer(series.getPointTransformer);\n  }\n\n  return stackedSeries;\n};\n\nvar applyStacking = function (seriesList, dataItems, seriesToStackMap, offset, order) {\n  var stacksKeys = {};\n  var seriesPositions = {};\n  collectStacks(seriesList, seriesToStackMap, stacksKeys, seriesPositions);\n\n  if (Object.keys(stacksKeys).length === 0) {\n    return seriesList;\n  }\n\n  var stackedData = getStackedData(stacksKeys, dataItems, offset, order);\n  return seriesList.map(function (seriesItem) {\n    var stackId = seriesToStackMap[seriesItem.name];\n    var stackData = stackedData[stackId];\n\n    if (!stackData) {\n      return seriesItem;\n    }\n\n    var position = seriesPositions[seriesItem.name];\n    return buildStackedSeries(seriesItem, stackData[position]);\n  });\n};\n\nvar getGroupName = function (series, i, seriesToStackMap) {\n  var stackId = seriesToStackMap[series.name];\n  return stackId >= 0 ? String(stackId) : \"group-\" + i;\n};\n\nvar getGroupedPointTransformer = function (getPointTransformer, groupCount, groupOffset) {\n  var wrapper = function (series) {\n    var transform = getPointTransformer(series);\n    var widthCoeff = 1 / groupCount;\n    return function (point) {\n      var original = transform(point);\n      var arg = original.arg - original.maxBarWidth * (0.5 - 0.5 * widthCoeff - groupOffset * widthCoeff);\n\n      var result = __assign(__assign({}, original), {\n        arg: arg,\n        maxBarWidth: original.maxBarWidth / groupCount\n      });\n\n      return result;\n    };\n  }; // Preserve static fields of original transformer.\n\n\n  Object.assign(wrapper, getPointTransformer);\n  return wrapper;\n};\n\nvar applyGrouping = function (seriesList, seriesToStackMap) {\n  var groups = new Set();\n  seriesList.forEach(function (seriesItem, i) {\n    if (seriesItem.getPointTransformer.isBroad) {\n      groups.add(getGroupName(seriesItem, i, seriesToStackMap));\n    }\n  }); // There cannot be single group.\n\n  if (groups.size < 2) {\n    return seriesList;\n  }\n\n  var scale = scaleBand$1().domain(Array.from(groups)).range([0, groups.size]);\n  return seriesList.map(function (seriesItem, i) {\n    if (!seriesItem.getPointTransformer.isBroad) {\n      return seriesItem;\n    }\n\n    var getPointTransformer = getGroupedPointTransformer(seriesItem.getPointTransformer, groups.size, scale(getGroupName(seriesItem, i, seriesToStackMap)));\n    return __assign(__assign({}, seriesItem), {\n      getPointTransformer: getPointTransformer\n    });\n  });\n};\n/** @internal */\n\n\nvar getStackedSeries = function (seriesList, dataItems, _a) {\n  var stacks = _a.stacks,\n      offset = _a.offset,\n      order = _a.order;\n  var map = buildSeriesToStackMap(stacks);\n  var stackedSeriesList = applyStacking(seriesList, dataItems, map, offset, order);\n  var groupedSeriesList = applyGrouping(stackedSeriesList, map);\n  return groupedSeriesList;\n};\n\nvar resetDomainItems = function (domains) {\n  var result = {};\n  Object.keys(domains).forEach(function (key) {\n    result[key] = __assign(__assign({}, domains[key]), {\n      domain: []\n    });\n  });\n  return result;\n};\n\nvar extendDomainsWithAdditionalItems = function (domains, series) {\n  var _a;\n\n  var items = series.points.map(function (point) {\n    return point.value0;\n  });\n  var key = getValueDomainName(series.scaleName);\n  var domain = updateDomainItems(domains[key], items);\n  return domain !== domains[key] ? __assign(__assign({}, domains), (_a = {}, _a[key] = domain, _a)) : domains;\n}; // Stacking changes data - so computed domains have to be discarded\n// and recalculated from the new stacked data.\n\n/** @internal */\n\n\nvar getStackedDomains = function (domains, seriesList) {\n  var stackedSeries = seriesList.filter(function (series) {\n    return series.isStacked;\n  });\n\n  if (!stackedSeries.length) {\n    return domains;\n  } // Recalculate domains in a common way.\n\n\n  var rebuiltDomains = seriesList.reduce(extendDomains, resetDomainItems(domains)); // Take additional \"value0\" fields into account.\n\n  return stackedSeries.reduce(extendDomainsWithAdditionalItems, rebuiltDomains);\n};\n/** @internal */\n\n\nvar easeOutCubic = function (t) {\n  return (t - 1) * (t - 1) * (t - 1) + 1;\n};\n/** @internal */\n\n\nvar getDelay = function (index, isStart) {\n  return isStart ? index * 30 : 0;\n};\n/** @internal */\n\n\nvar getStartVal$1 = function (scales) {\n  return scales.valScale.copy().clamp(true)(0);\n};\n/** @internal */\n\n\nvar getPathStart = function (scales, _a) {\n  var coordinates = _a.coordinates;\n  var start = getStartVal$1(scales);\n  return {\n    coordinates: coordinates.map(function (coord) {\n      return {\n        arg: coord.arg,\n        val: start,\n        startVal: start\n      };\n    })\n  };\n};\n/** @internal */\n\n\nvar getPointStart = function (scales, _a) {\n  var arg = _a.arg;\n  var start = getStartVal$1(scales);\n  return {\n    arg: arg,\n    val: start,\n    startVal: start\n  };\n};\n/** @internal */\n\n\nvar getPieStart = function (scales, _a) {\n  var startAngle = _a.startAngle,\n      endAngle = _a.endAngle;\n  return {\n    innerRadius: 0,\n    outerRadius: 0,\n    startAngle: startAngle,\n    endAngle: endAngle\n  };\n}; // Comparing by reference is not an option as Tracker always sends new objects.\n// Tracker cannot persist references as it actually operates with simple scalars\n// and constructs objects to provide info in a slightly more suitable way.\n\n\nvar compareTargets = function (target1, target2) {\n  return target1.series === target2.series && target1.point === target2.point;\n}; // If *currentTarget* is among *targets* then it has priority but only while its distance\n// is not significantly greater (DISTANCE_PRIORITY_RATIO) than that of the best candidate.\n\n\nvar selectTarget = function (targets, currentTarget) {\n  var candidate = targets[0];\n\n  if (!currentTarget) {\n    return candidate;\n  }\n\n  if (!candidate) {\n    return null;\n  }\n\n  return compareTargets(candidate, currentTarget) ? undefined : candidate;\n};\n/** @internal */\n\n\nvar processPointerMove = function (targets, currentTarget, notify) {\n  var nextTarget = selectTarget(targets, currentTarget);\n\n  if (nextTarget === undefined) {\n    return undefined;\n  }\n\n  if (notify) {\n    notify(nextTarget);\n  }\n\n  return nextTarget;\n}; // This function is to be called from context where DOM is available -\n// so *window* can be accessed safely.\n\n/** @internal */\n\n\nvar getOffset = function (element) {\n  var _a = element.getBoundingClientRect(),\n      left = _a.left,\n      top = _a.top; // Safer way to get window.\n\n\n  var defaultView = element.ownerDocument.defaultView;\n  var _b = defaultView,\n      pageXOffset = _b.pageXOffset,\n      pageYOffset = _b.pageYOffset;\n  return [left + pageXOffset, top + pageYOffset];\n};\n/** @internal */\n\n\nvar getEventCoords = function (e, offset) {\n  var _a = e.touches ? e.touches[0] : e,\n      pageX = _a.pageX,\n      pageY = _a.pageY;\n\n  return [pageX - offset[0], pageY - offset[1]];\n};\n/** @internal */\n\n\nvar getParameters = function (series, target) {\n  var currentSeries = series.find(function (_a) {\n    var name = _a.name;\n    return target.series === name;\n  });\n  var item = currentSeries.points.find(function (point) {\n    return point.index === target.point;\n  });\n  return {\n    element: currentSeries.getPointTransformer.getTargetElement(item),\n    text: \"\" + item.value\n  };\n};\n/** @internal */\n\n\nvar createReference = function (rect, rootRef) {\n  return {\n    // These two fields together with *width* and *height* are left with stub data for\n    // simplicity reasons - they seem to be unused by *Popper*.\n    clientWidth: 0,\n    clientHeight: 0,\n    getBoundingClientRect: function () {\n      // This function is expected to be called (by the *Popper*) when DOM is ready -\n      // so *rootRef.current* can be accessed.\n      var offset = getOffset(rootRef.current); // *getBoundingClientRect* of a real html element is affected by window scrolling.\n      // *popper.js* subscribes \"html -> getBoundingClientRect -> (left, top)\" from\n      // \"reference -> getBoundingClientRect\" - so here it is added.\n\n      var htmlRect = rootRef.current.ownerDocument.documentElement.getBoundingClientRect();\n      var left = rect[0] + offset[0] + htmlRect.left;\n      var right = rect[2] + offset[0] + htmlRect.left;\n      var top = rect[1] + offset[1] + htmlRect.top;\n      var bottom = rect[3] + offset[1] + htmlRect.top;\n      return {\n        left: left,\n        top: top,\n        right: right,\n        bottom: bottom,\n        width: right - left,\n        height: bottom - top\n      };\n    }\n  };\n};\n/** @internal */\n\n\nvar processHandleTooltip = function (targets, currentTarget, onTargetItemChange) {\n  var filterTargets = targets.filter(function (target) {\n    return target.point !== undefined;\n  });\n  return processPointerMove(filterTargets, currentTarget, onTargetItemChange);\n};\n\nvar getArgumentBounds = function (viewport) {\n  return viewport && viewport.argumentStart !== undefined && viewport.argumentEnd !== undefined ? [viewport.argumentStart, viewport.argumentEnd] : null;\n};\n\nvar getValueBounds = function (viewport) {\n  return viewport && viewport.valueStart !== undefined && viewport.valueEnd !== undefined ? [viewport.valueStart, viewport.valueEnd] : null;\n};\n\nvar getValueScaleName = function (viewport) {\n  return getValueDomainName(viewport && viewport.scaleName);\n};\n\nvar getDefaultBounds = function (scale) {\n  var domain = scale.domain();\n  return [domain[0], domain[domain.length - 1]];\n};\n\nvar proportionallyExtendRange = function (range, subRange) {\n  var p = (subRange[0] - subRange[1]) / (range[0] - range[1]);\n  var q = subRange[0] - p * range[0];\n  return [(range[0] - q) / p, (range[1] - q) / p];\n};\n\nvar adjustRange = function (domain, bounds, range) {\n  var scale = makeScale(domain, range);\n  var subRange = scaleBounds(scale, bounds);\n  return rangesEqual(subRange, range) ? range : proportionallyExtendRange(range, subRange);\n};\n\nvar update = function (ranges, changes, key, domain, bounds) {\n  var newRange = adjustRange(domain, bounds, ranges[key]);\n\n  if (newRange !== ranges[key]) {\n    changes[key] = newRange;\n  }\n};\n/** @internal */\n\n\nvar adjustLayout = function (domains, ranges, viewport) {\n  var changes = {};\n  var argumentBounds = getArgumentBounds(viewport);\n\n  if (argumentBounds) {\n    update(ranges, changes, ARGUMENT_DOMAIN, domains[ARGUMENT_DOMAIN], argumentBounds);\n  }\n\n  var valueBounds = getValueBounds(viewport);\n\n  if (valueBounds) {\n    update(ranges, changes, VALUE_DOMAIN, domains[getValueScaleName(viewport)], valueBounds);\n  }\n\n  return Object.keys(changes).length ? __assign(__assign({}, ranges), changes) : ranges;\n};\n\nvar boundsForScale = function (name, scales, currentBounds, interaction, type, delta, anchor, range) {\n  if (!checkInteraction(interaction, type)) {\n    return null;\n  }\n\n  var scale = scales[name];\n  var bounds = currentBounds || getDefaultBounds(scale);\n  var newBounds;\n\n  if (type === 'pan') {\n    newBounds = moveBounds(scale, bounds, delta);\n  } else if (type === 'zoom') {\n    newBounds = range ? invertBoundsRange(scale, range) : growBounds(scale, bounds, delta, anchor);\n  }\n\n  return newBounds !== bounds ? newBounds : null;\n};\n/** @internal */\n\n\nvar getViewport = function (scales, rotated, _a, type, deltas, anchors, ranges, viewport, onViewportChange) {\n  var _b = __read(_a, 2),\n      argInteraction = _b[0],\n      valInteraction = _b[1];\n\n  var argIndex = Number(rotated);\n  var valIndex = 1 - argIndex;\n  var changes = {};\n  var argumentBounds = boundsForScale(ARGUMENT_DOMAIN, scales, getArgumentBounds(viewport), argInteraction, type, deltas ? deltas[argIndex] : 0, anchors ? anchors[argIndex] : 0, ranges ? ranges[argIndex] : undefined);\n  var valueBounds = boundsForScale(getValueScaleName(viewport), scales, getValueBounds(viewport), valInteraction, type, deltas ? deltas[valIndex] : 0, anchors ? anchors[valIndex] : 0, ranges ? ranges[valIndex] : undefined);\n\n  if (argumentBounds) {\n    changes.argumentStart = argumentBounds[0];\n    changes.argumentEnd = argumentBounds[1];\n  }\n\n  if (valueBounds) {\n    changes.valueStart = valueBounds[0];\n    changes.valueEnd = valueBounds[1];\n  }\n\n  if (Object.keys(changes).length) {\n    var newViewport = __assign(__assign({}, viewport), changes);\n\n    if (onViewportChange) {\n      onViewportChange(newViewport);\n    }\n\n    return {\n      viewport: newViewport\n    };\n  }\n\n  return null;\n};\n/** @internal */\n\n\nvar getDeltaForTouches = function (touches) {\n  var deltaX = touches[0].pageX - touches[1].pageX;\n  var deltaY = touches[0].pageY - touches[1].pageY;\n  var delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  var center = [(touches[0].pageX + touches[1].pageX) / 2, (touches[0].pageY + touches[1].pageY) / 2];\n  return {\n    delta: delta,\n    center: center\n  };\n};\n/** @internal */\n\n\nvar isKeyPressed = function (event, key) {\n  return event[key + \"Key\"];\n};\n/** @internal */\n\n\nvar getWheelDelta = function (_a) {\n  var wheelDelta = _a.wheelDelta,\n      deltaY = _a.deltaY;\n  return wheelDelta !== undefined ? wheelDelta : deltaY * -30; // deltaY for FF\n};\n/** @internal */\n\n\nvar isMultiTouch = function (e) {\n  return e.touches && e.touches.length === 2;\n};\n/** @internal */\n\n\nvar attachEvents = function (node, handlers) {\n  Object.keys(handlers).forEach(function (el) {\n    node.addEventListener(el, handlers[el], {\n      passive: false\n    });\n  });\n};\n/** @internal */\n\n\nvar detachEvents = function (node, handlers) {\n  Object.keys(handlers).forEach(function (el) {\n    node.removeEventListener(el, handlers[el]);\n  });\n};\n/** @internal */\n\n\nvar getRect$1 = function (rotated, interactionWithArguments, interactionWithValues, initial, current, pane) {\n  var isZoomArgument = checkInteraction(interactionWithArguments, 'zoom');\n  var isZoomValue = checkInteraction(interactionWithValues, 'zoom');\n  var isXFixed = rotated ? isZoomValue : isZoomArgument;\n  var isYFixed = rotated ? isZoomArgument : isZoomValue;\n  var x = isXFixed ? Math.min(initial[0], current[0]) : 0;\n  var width = isXFixed ? Math.abs(initial[0] - current[0]) : pane.width;\n  var y = isYFixed ? Math.min(initial[1], current[1]) : 0;\n  var height = isYFixed ? Math.abs(initial[1] - current[1]) : pane.height;\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n};\n\nvar checkInteraction = function (interaction, type) {\n  return interaction === 'both' || interaction === type;\n};\n/** @internal */\n\n\nvar setCursorType = function (node, type) {\n  var defaultType = 'pointer';\n  node.style.cursor = type ? type : defaultType;\n};\n/** @internal */\n\n\nvar isReadyToRenderSeries = function (_a, _b, isPreviousDataEmpty, axesExist) {\n  var current = _b.current;\n\n  var pane = _a.pane,\n      restLayouts = __rest(_a, [\"pane\"]);\n\n  if (!pane.width && !pane.height) {\n    return false;\n  }\n\n  var bbox = {\n    width: current.clientWidth,\n    height: current.clientHeight\n  };\n  var width = pane.width;\n  var height = pane.height;\n  Object.entries(restLayouts).forEach(function (el) {\n    var orientation = el[0].split('-')[0];\n\n    if (orientation === 'top' || orientation === 'bottom') {\n      height += el[1].height;\n    } else {\n      width += el[1].width;\n    }\n  });\n  return Math.abs(bbox.width - width) < DIFFERENCE && Math.abs(bbox.height - height) < DIFFERENCE && isPreviousDataEmptyOrNoAxes(isPreviousDataEmpty, axesExist);\n};\n\nvar isPreviousDataEmptyOrNoAxes = function (isPreviousDataEmpty, axesExist) {\n  return !isPreviousDataEmpty || !axesExist;\n};\n\nvar getSegmentLength = function (dx, dy) {\n  return Math.sqrt(dx * dx + dy * dy);\n}; // *distance* is a normalized distance to point.\n// It belongs to [0, Infinity):\n//  = 0 - at point center\n//  = 1 - at point border\n//  > 1 - outside point\n// This function is called from event handlers (when DOM is available) -\n// *window.document* can be accessed safely.\n\n\nvar createContext = function () {\n  return document.createElement('canvas').getContext('2d');\n}; // For a start using browser canvas will suffice.\n// However a better and more clean solution should be found.\n// Can't d3 perform hit testing?\n\n\nvar createCanvasAbusingHitTester = function (makePath, points, rotated) {\n  var ctx = createContext();\n  var path = makePath(rotated);\n  path.context(ctx);\n  path(points);\n  return function (_a) {\n    var _b = __read(_a, 2),\n        x = _b[0],\n        y = _b[1];\n\n    return ctx.isPointInPath(x, y);\n  };\n};\n\nvar LINE_POINT_SIZE = 20;\nvar LINE_TOLERANCE = 10;\n\nvar getDistance = function (_a, _b, rotated) {\n  var _c = __read(_a, 2),\n      px = _c[0],\n      py = _c[1];\n\n  var arg = _b.arg,\n      val = _b.val;\n  var x = rotated ? val : arg;\n  var y = rotated ? arg : val;\n  return getSegmentLength(px - x, py - y);\n};\n\nvar createContinuousSeriesHitTesterCreator = function (makePath) {\n  return function (points, rotated) {\n    var fallbackHitTest = createCanvasAbusingHitTester(makePath, points, rotated);\n    return function (target) {\n      var minDistance = Number.MAX_VALUE;\n      var minIndex = 0;\n      var list = [];\n      points.forEach(function (point, i) {\n        var distance = getDistance(target, point, rotated);\n\n        if (distance <= LINE_POINT_SIZE) {\n          list.push({\n            distance: distance,\n            index: point.index\n          });\n        }\n\n        if (distance < minDistance) {\n          minDistance = distance;\n          minIndex = i;\n        }\n      }); // This is special case for continuous series - if no point is actually hit\n      // then the closest point to the pointer position is picked.\n\n      if (!list.length && fallbackHitTest(target)) {\n        list.push({\n          index: points[minIndex].index,\n          distance: minDistance\n        });\n      }\n\n      return list.length ? {\n        points: list\n      } : null;\n    };\n  };\n};\n\nvar createPointsEnumeratingHitTesterCreator = function (hitTestPoint) {\n  return function (points, rotated) {\n    return function (target) {\n      var list = [];\n      points.forEach(function (point) {\n        var status = hitTestPoint(target, point, rotated);\n\n        if (status) {\n          list.push({\n            index: point.index,\n            distance: status.distance\n          });\n        }\n      });\n      return list.length ? {\n        points: list\n      } : null;\n    };\n  };\n};\n/** @internal */\n\n\nvar createAreaHitTester = createContinuousSeriesHitTesterCreator(function (rotated) {\n  var path = area();\n  var hitArea = rotated ? dRotateArea : dArea;\n\n  if (rotated) {\n    path.x1(hitArea.x1());\n    path.x0(hitArea.x0());\n    path.y(hitArea.y());\n  } else {\n    path.x(hitArea.x());\n    path.y1(hitArea.y1());\n    path.y0(hitArea.y0());\n  }\n\n  return path;\n});\n/** @internal */\n\nvar createLineHitTester = createContinuousSeriesHitTesterCreator(function (rotated) {\n  var path = area();\n  var hitLine = rotated ? dRotateLine : dLine;\n\n  if (rotated) {\n    var getX_1 = hitLine.x();\n    path.y(hitLine.y());\n    path.x0(function (point) {\n      return getX_1(point) + LINE_TOLERANCE;\n    });\n    path.x1(function (point) {\n      return getX_1(point) - LINE_TOLERANCE;\n    });\n  } else {\n    var getY_1 = hitLine.y();\n    path.x(hitLine.x());\n    path.y1(function (point) {\n      return getY_1(point) - LINE_TOLERANCE;\n    });\n    path.y0(function (point) {\n      return getY_1(point) + LINE_TOLERANCE;\n    });\n  }\n\n  return path;\n});\n/** @internal */\n\nvar createSplineHitTester = createContinuousSeriesHitTesterCreator(function (rotated) {\n  var path = area();\n  var hitSpline = rotated ? dRotateSpline : dSpline;\n\n  if (rotated) {\n    var getX_2 = hitSpline.x();\n    path.y(hitSpline.y());\n    path.x1(function (point) {\n      return getX_2(point) - LINE_TOLERANCE;\n    });\n    path.x0(function (point) {\n      return getX_2(point) + LINE_TOLERANCE;\n    });\n  } else {\n    var getY_2 = hitSpline.y();\n    path.x(hitSpline.x());\n    path.y1(function (point) {\n      return getY_2(point) - LINE_TOLERANCE;\n    });\n    path.y0(function (point) {\n      return getY_2(point) + LINE_TOLERANCE;\n    });\n  }\n\n  path.curve(hitSpline.curve());\n  return path;\n});\n\nvar hitTestRect = function (dx, dy, halfX, halfY) {\n  return Math.abs(dx) <= halfX && Math.abs(dy) <= halfY ? {\n    distance: getSegmentLength(dx, dy)\n  } : null;\n}; // Some kind of binary search can be used here as bars can be ordered along argument axis.\n\n/** @internal */\n\n\nvar createBarHitTester = createPointsEnumeratingHitTesterCreator(function (_a, point, rotated) {\n  var _b = __read(_a, 2),\n      px = _b[0],\n      py = _b[1];\n\n  var _c = point,\n      arg = _c.arg,\n      val = _c.val,\n      startVal = _c.startVal,\n      barWidth = _c.barWidth,\n      maxBarWidth = _c.maxBarWidth;\n  var halfWidth = maxBarWidth * barWidth / 2;\n  var halfHeight = Math.abs(val - startVal) / 2;\n  var centerVal = (val + startVal) / 2;\n  var xCenter = rotated ? centerVal : arg;\n  var yCenter = rotated ? arg : centerVal;\n  return hitTestRect(px - xCenter, py - yCenter, rotated ? halfHeight : halfWidth, rotated ? halfWidth : halfHeight);\n});\n/** @internal */\n\nvar createScatterHitTester = createPointsEnumeratingHitTesterCreator(function (_a, obj, rotated) {\n  var _b = __read(_a, 2),\n      px = _b[0],\n      py = _b[1];\n\n  var point = obj.point;\n  var distance = getDistance([px, py], obj, rotated);\n  return distance <= point.size / 2 ? {\n    distance: distance\n  } : null;\n});\n\nvar mapAngleTod3 = function (angle) {\n  var ret = angle + Math.PI / 2;\n  return ret >= 0 ? ret : ret + Math.PI * 2;\n}; // Some kind of binary search can be used here as pies can be ordered along angle axis.\n\n/** @internal */\n\n\nvar createPieHitTester = createPointsEnumeratingHitTesterCreator(function (_a, point) {\n  var _b = __read(_a, 2),\n      px = _b[0],\n      py = _b[1];\n\n  var _c = point,\n      x = _c.arg,\n      y = _c.val,\n      innerRadius = _c.innerRadius,\n      outerRadius = _c.outerRadius,\n      startAngle = _c.startAngle,\n      maxRadius = _c.maxRadius,\n      endAngle = _c.endAngle;\n  var inner = innerRadius * maxRadius;\n  var outer = outerRadius * maxRadius;\n  var rCenter = (inner + outer) / 2;\n  var angleCenter = (startAngle + endAngle) / 2;\n  var halfRadius = (outer - inner) / 2;\n  var halfAngle = Math.abs(startAngle - endAngle) / 2;\n  var dx = px - x;\n  var dy = py - y;\n  var r = getSegmentLength(dx, dy);\n  var angle = mapAngleTod3(Math.atan2(dy, dx)); // This is not a correct distance calculation but for now it will suffice.\n  // For Pie series it would not be actually used.\n\n  return hitTestRect(r - rCenter, angle - angleCenter, halfRadius, halfAngle);\n});\n\nvar buildFilter = function (targets) {\n  var result = {};\n  targets.forEach(function (_a) {\n    var series = _a.series,\n        point = _a.point;\n    (result[series] = result[series] || new Set()).add(point);\n  });\n  return result;\n};\n/** @internal */\n\n\nvar changeSeriesState = function (seriesList, targets, state) {\n  if (targets.length === 0) {\n    return seriesList;\n  }\n\n  var filter = buildFilter(targets);\n  var matches = 0;\n  var result = seriesList.map(function (seriesItem) {\n    var set = filter[seriesItem.name];\n\n    if (!set) {\n      return seriesItem;\n    }\n\n    matches += 1;\n    var props = {\n      state: state\n    };\n\n    if (set.size) {\n      props.points = seriesItem.points.map(function (point) {\n        return set.has(point.index) ? __assign(__assign({}, point), {\n          state: state\n        }) : point;\n      });\n    }\n\n    return __assign(__assign({}, seriesItem), props);\n  }); // This is to prevent false rerenders.\n\n  return matches > 0 ? result : seriesList;\n};\n\nvar getDefaultLegendItems = function (series) {\n  return series.map(function (_a) {\n    var text = _a.name,\n        color = _a.color;\n    return {\n      text: text,\n      color: color\n    };\n  });\n};\n\nvar getPieLegendItems = function (series) {\n  return series[0].points.map(function (_a) {\n    var text = _a.argument,\n        color = _a.color;\n    return {\n      text: text,\n      color: color\n    };\n  });\n}; // The function supports special case when there is single Pie series.\n// There is no common way to tell if series is PieSeries -\n// checking `radius` props will suffice for now.\n\n\nvar isSinglePieSeriesCase = function (series) {\n  return series.length === 1 && 'innerRadius' in series[0] && 'outerRadius' in series[0];\n};\n/** @internal */\n\n\nvar getLegendItems = function (series) {\n  return (isSinglePieSeriesCase(series) ? getPieLegendItems : getDefaultLegendItems)(series);\n};\n\nvar DISTANCE_THRESHOLD = 20;\n\nvar compareHitTargets = function (t1, t2) {\n  var distanceDelta = t1.distance - t2.distance;\n\n  if (Math.abs(distanceDelta) <= DISTANCE_THRESHOLD) {\n    var orderDelta = t2.order - t1.order;\n    return orderDelta !== 0 ? orderDelta : distanceDelta;\n  }\n\n  return distanceDelta;\n};\n\nvar buildEventHandler = function (seriesList, handlers) {\n  var hitTesters = null;\n\n  var createHitTesters = function () {\n    var obj = {};\n    seriesList.forEach(function (seriesItem) {\n      obj[seriesItem.symbolName] = seriesItem.createHitTester(seriesItem.points, seriesItem.rotated);\n    });\n    return obj;\n  };\n\n  return function (e) {\n    var location = getEventCoords(e, getOffset(e.currentTarget));\n    hitTesters = hitTesters || createHitTesters();\n    var targets = [];\n    seriesList.forEach(function (_a) {\n      var series = _a.name,\n          order = _a.index,\n          symbolName = _a.symbolName;\n      var status = hitTesters[symbolName](location);\n\n      if (status) {\n        targets.push.apply(targets, __spread(status.points.map(function (point) {\n          return {\n            series: series,\n            order: order,\n            point: point.index,\n            distance: point.distance\n          };\n        })));\n      }\n    });\n    targets.sort(compareHitTargets);\n    var arg = {\n      location: location,\n      targets: targets,\n      event: e.nativeEvent\n    };\n    handlers.forEach(function (handler) {\n      return handler(arg);\n    });\n  };\n};\n\nvar buildLeaveEventHandler = function (handlers) {\n  return function (e) {\n    var location = getEventCoords(e, getOffset(e.currentTarget));\n    var arg = {\n      location: location,\n      targets: []\n    };\n    handlers.forEach(function (handler) {\n      return handler(arg);\n    });\n  };\n}; // The result is of Map<string, Function> type.\n// Keys are DOM event names (https://developer.mozilla.org/en-US/docs/Web/Events).\n\n/** @internal */\n\n\nvar buildEventHandlers = function (seriesList, _a) {\n  var clickHandlers = _a.clickHandlers,\n      pointerMoveHandlers = _a.pointerMoveHandlers;\n  var handlers = {};\n  if (!hasWindow()) return handlers;\n\n  if (clickHandlers.length) {\n    handlers.click = buildEventHandler(seriesList, clickHandlers);\n  }\n\n  if (pointerMoveHandlers.length) {\n    var moveHandler = buildEventHandler(seriesList, pointerMoveHandlers);\n    var leaveHandler = buildLeaveEventHandler(pointerMoveHandlers);\n\n    if ('ontouchstart' in window) {\n      handlers.touchstart = moveHandler;\n    } else {\n      handlers.mousemove = moveHandler;\n      handlers.mouseleave = leaveHandler;\n    }\n  }\n\n  return handlers;\n};\n/** @internal */\n\n\nvar getProgress = function (_a) {\n  var elapsed = _a.elapsed,\n      total = _a.total;\n  return Math.min(elapsed / total, 1);\n};\n/** @internal */\n\n\nvar runAnimation = function (setAttributes, getNewPositions, easing, duration, delay) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      var time = {\n        start: Date.now(),\n        total: duration,\n        elapsed: 0\n      };\n\n      var step = function () {\n        time.elapsed = Date.now() - time.start;\n        var progress = getProgress(time);\n        setAttributes(getNewPositions(easing(progress)));\n        if (progress < 1) requestAnimationFrame(step);\n      };\n\n      resolve(requestAnimationFrame(step));\n    }, delay);\n  });\n};\n/** @internal */\n\n\nvar buildAnimation = function (easing, duration) {\n  return function (startCoords, endCoords, processAnimation, setAttributes, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    var animationID;\n\n    var stop = function () {\n      if (animationID) {\n        cancelAnimationFrame(animationID);\n        animationID = undefined;\n      }\n    };\n\n    var run = function (start, end, delayValue) {\n      animationID = runAnimation(setAttributes, processAnimation(start, end), easing, duration, delayValue).then(function (res) {\n        animationID = res;\n      });\n    };\n\n    run(startCoords, endCoords, delay);\n    return {\n      update: function (updatedStartCoords, updatedEndCoords, updatedDelay) {\n        if (updatedDelay === void 0) {\n          updatedDelay = 0;\n        }\n\n        stop();\n        run(updatedStartCoords, updatedEndCoords, updatedDelay);\n      },\n      stop: stop\n    };\n  };\n};\n\nvar lerp = function (a, b, t) {\n  return a + t * (b - a);\n};\n/** @internal */\n\n\nvar processPointAnimation = function (startCoords, endCoords) {\n  return function (progress) {\n    return {\n      arg: lerp(startCoords.arg, endCoords.arg, progress),\n      val: lerp(startCoords.val, endCoords.val, progress)\n    };\n  };\n};\n/** @internal */\n\n\nvar processBarAnimation = function (startCoords, endCoords) {\n  return function (progress) {\n    return {\n      arg: lerp(startCoords.arg, endCoords.arg, progress),\n      val: lerp(startCoords.val, endCoords.val, progress),\n      startVal: lerp(startCoords.startVal, endCoords.startVal, progress)\n    };\n  };\n};\n/** @internal */\n\n\nvar processLineAnimation = function (_a, _b) {\n  var coordinates = _a.coordinates;\n  var endCoordinates = _b.coordinates;\n  return function (progress) {\n    return {\n      coordinates: endCoordinates.map(function (coord, index) {\n        var startCurCoord = coordinates[index];\n        return __assign(__assign({}, coord), {\n          arg: lerp(startCurCoord.arg, coord.arg, progress),\n          val: lerp(startCurCoord.val, coord.val, progress)\n        });\n      })\n    };\n  };\n};\n/** @internal */\n\n\nvar processAreaAnimation = function (_a, _b) {\n  var coordinates = _a.coordinates;\n  var endCoordinates = _b.coordinates;\n  return function (progress) {\n    return {\n      coordinates: endCoordinates.map(function (coord, index) {\n        var startCurCoord = coordinates[index];\n        return __assign(__assign({}, coord), {\n          arg: lerp(startCurCoord.arg, coord.arg, progress),\n          val: lerp(startCurCoord.val, coord.val, progress),\n          startVal: lerp(startCurCoord.startVal, coord.startVal, progress)\n        });\n      })\n    };\n  };\n};\n/** @internal */\n\n\nvar processPieAnimation = function (start, end) {\n  return function (progress) {\n    return {\n      innerRadius: lerp(start.innerRadius, end.innerRadius, progress),\n      outerRadius: lerp(start.outerRadius, end.outerRadius, progress),\n      startAngle: lerp(start.startAngle, end.startAngle, progress),\n      endAngle: lerp(start.endAngle, end.endAngle, progress)\n    };\n  };\n};\n\nexport { ARGUMENT_DOMAIN, BAND, BOTTOM, DIFFERENCE, END, HORIZONTAL, HOVERED, LEFT, LINEAR, MIDDLE, RIGHT, SELECTED, START, TOP, VALUE_DOMAIN, VERTICAL, addDomain, addSeries, adjustBarSize, adjustLayout, attachEvents, bBoxes, buildAnimation, buildEventHandlers, buildScales, changeSeriesState, createAreaHitTester, createBarHitTester, createLineHitTester, createPieHitTester, createReference, createScatterHitTester, createSplineHitTester, dArea, dBar, dLine, dPie, dRotateArea, dRotateLine, dRotateSpline, dSpline, dSymbol, defaultDomains, detachEvents, easeOutCubic, extendDomains, findSeriesByName, getAreaPointTransformer, getBarPointTransformer, getDelay, getDeltaForTouches, getEventCoords, getLegendItems, getLinePointTransformer, getOffset, getParameters, getPathStart, getPiePointTransformer, getPieStart, getPointStart, getRanges, getRect$1 as getRect, getRotatedPosition, getScatterPointTransformer, getStackedDomains, getStackedSeries, getStartVal$1 as getStartVal, getTickCoordinates, getValueDomainName, getViewport, getVisibility, getWheelDelta, getWidth, gridCoordinatesGetter, growBounds, invertBoundsRange, isCoordinatesChanged, isHorizontal, isKeyPressed, isMultiTouch, isReadyToRenderSeries, isScalesChanged, isValidPosition, isValuesChanged, makeScale, moveBounds, processAreaAnimation, processBarAnimation, processHandleTooltip, processLineAnimation, processPieAnimation, processPointAnimation, processPointerMove, rangesEqual, scaleBand, scaleBounds, scaleLinear, scaleSeriesPoints, setCursorType, tickCoordinatesGetter, updateDomainItems };","map":{"version":3,"sources":["../src/constants.ts","../src/utils/scale.ts","../src/plugins/scale/computeds.ts","../src/plugins/layout-manager/computeds.ts","../src/plugins/axis/computeds.ts","../src/plugins/series/computeds.ts","../src/plugins/stack/computeds.ts","../src/plugins/animation/computeds.ts","../src/utils/hover-state.ts","../src/utils/common.ts","../src/plugins/tooltip/computeds.ts","../src/plugins/zoom-and-pan/computeds.ts","../src/plugins/controller-component/computeds.ts","../src/utils/series.ts","../src/utils/legend.ts","../src/utils/event-tracker.ts","../src/utils/animation.ts"],"names":["d3ScaleLinear","d3ScaleBand","_a","scaleBand","getStartVal","getRect"],"mappings":"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","sourcesContent":["/** @internal */\nexport const HORIZONTAL = 'horizontal';\n/** @internal */\nexport const VERTICAL = 'vertical';\n/** @internal */\nexport const TOP = 'top';\n/** @internal */\nexport const BOTTOM = 'bottom';\n/** @internal */\nexport const LEFT = 'left';\n/** @internal */\nexport const RIGHT = 'right';\n/** @internal */\nexport const MIDDLE = 'middle';\n/** @internal */\nexport const END = 'end';\n/** @internal */\nexport const START = 'start';\n/** @internal */\nexport const LINEAR = 'linear';\n/** @internal */\nexport const BAND = 'band';\n/** @internal */\nexport const ARGUMENT_DOMAIN = 'argument-domain';\n/** @internal */\nexport const VALUE_DOMAIN = 'value-domain';\n/** @internal */\nexport const HOVERED = 'hovered';\n/** @internal */\nexport const SELECTED = 'selected';\n/** @internal */\nexport const DIFFERENCE = 3;\n","import {\n  scaleLinear as d3ScaleLinear, scaleBand as d3ScaleBand,\n} from 'd3-scale';\nimport {\n  ARGUMENT_DOMAIN, VALUE_DOMAIN,\n} from '../constants';\nimport {\n  ScaleObject, FactoryFn, DomainInfo, NumberArray, DomainBounds, DomainItems,\n} from '../types';\n\n/** @internal */\nexport const scaleLinear: FactoryFn = d3ScaleLinear as any;\n\nexport const scaleBand: FactoryFn = () => (\n  d3ScaleBand().paddingInner(0.3).paddingOuter(0.15) as any\n);\n\n/** @internal */\nexport const isHorizontal = (name: string, rotated: boolean) => (\n  name === ARGUMENT_DOMAIN === !rotated\n);\n\n// tslint:disable-next-line: ban-types\nconst makeScaleHelper = <T extends Function>(linear: T, band: T) => {\n  const func: any = (scale: ScaleObject, ...args: any[]) => {\n    const choosen = 'bandwidth' in scale ? band : linear;\n    return choosen(scale, ...args);\n  };\n  return func as T;\n};\n\nconst getLinearScaleWidth = (_: ScaleObject) => 0;\n\nconst getBandScaleWidth = (scale: ScaleObject) => scale.bandwidth!();\n\n/** @internal */\nexport const getWidth = makeScaleHelper(getLinearScaleWidth, getBandScaleWidth);\n\n/** @internal */\nexport const getValueDomainName = (name?: string) => name || VALUE_DOMAIN;\n\nconst floatsEqual = (a: number, b: number) => Math.abs(a - b) < Number.EPSILON;\n\n/** @internal */\nexport const rangesEqual = (r1: Readonly<NumberArray>, r2: Readonly<NumberArray>) =>\n  floatsEqual(r1[0], r2[0]) && floatsEqual(r1[1], r2[1]);\n\nconst wrapLinearScale = (scale: ScaleObject) => scale;\n\nconst wrapBandScale = (scale: ScaleObject): ScaleObject => {\n  const ret: any = (value: any) => scale(value) + scale.bandwidth!() / 2;\n  Object.assign(ret, scale);\n  return ret;\n};\n\nconst wrapScale = makeScaleHelper(wrapLinearScale, wrapBandScale);\n\n/** @internal */\nexport const makeScale = ({ factory, domain }: DomainInfo, range: NumberArray) => {\n  const scale = (factory || scaleLinear)().domain(domain).range(range);\n  return wrapScale(scale);\n};\n\n// It is implicitly supposed that Chart can accept any d3 scale. It is wrong.\n// The followings notes show that. d3 scales are not seamlessly interchangeable themselves\n// (i.e. band scale has no \"invert\", continuous scale has no \"bandwidth\").\n// We have to use \"adapters\" to mitigate the differences.\n// Hence Chart can actually accept any object that matches \"adapter\" interface.\n// TODO: We should update reference accordingly. There might be breaking changes though.\n\nconst scaleLinearBounds = (scale: ScaleObject, bounds: DomainBounds): NumberArray => (\n  bounds.map(scale) as NumberArray\n);\n\n// There is an issue - when range is \"inverted\" values are scaled incorrectly.\n//   scaleBand().domain(['a', 'b', 'c']).range([0, 60])('b') === 20\n//   scaleBand().domain(['a', 'b', 'c']).range([60, 0])('b') === 20 (should be 40)\nconst scaleBandBounds = (scale: ScaleObject, bounds: DomainBounds): NumberArray => {\n  const cleanScale = scale.copy().paddingInner!(0).paddingOuter!(0);\n  const fullRange = scale.range();\n  const sign = Math.sign(fullRange[1] - fullRange[0]);\n  return sign >= 0\n    ? [cleanScale(bounds[0]), cleanScale(bounds[1]) + cleanScale.bandwidth!()]\n    : [cleanScale(bounds[0]) + cleanScale.bandwidth!(), cleanScale(bounds[1])];\n};\n\nconst moveLinearScaleBounds = (\n  scale: ScaleObject, bounds: DomainBounds, delta: number,\n): DomainBounds => {\n  const fullRange = scale.range();\n  const sign = Math.sign(fullRange[1] - fullRange[0]);\n  const range = scaleLinearBounds(scale, bounds);\n  let r0 = range[0] + delta;\n  let r1 = range[1] + delta;\n  // Check if new range is outside of the left border.\n  if (Math.sign(r0 - fullRange[0]) !== sign) {\n    r0 = fullRange[0];\n    r1 = r0 + range[1] - range[0];\n  }\n  // Check if new range is outside of the right border.\n  if (Math.sign(fullRange[1] - r1) !== sign) {\n    r1 = fullRange[1];\n    r0 = r1 - range[1] + range[0];\n  }\n  const newBounds: DomainBounds = [scale.invert!(r0), scale.invert!(r1)];\n  return rangesEqual(bounds, newBounds) ? bounds : newBounds;\n};\n\n// This is pointer \"delta\" processing specific for \"band\" scale.\n// If pointer delta is significantly smaller than band size (0.3) then movement should be skipped\n// and current delta should be added to a next one (from a new \"move\" event).\n// Now there is no code that accumulates deltas.\n// In order to allow band scrolling at least somehow the following is applied - if pointer delta\n// is at least greater than 30 pixel then minimal movement is performed.\n// TODO: Make proper delta accumulation!\nconst adjustBandScaleMoveStep = (delta: number, step: number) => {\n  const ratio = Math.abs(delta / step);\n  const sign = Math.sign(delta / step);\n  if (ratio >= 0.5) {\n    return sign * Math.round(ratio);\n  }\n  if (ratio >= 0.3) {\n    return sign;\n  }\n  if (Math.abs(delta) > 30) {\n    return sign;\n  }\n  return 0;\n};\n\n// Band case is processed separately to preserve categories count in the bounds range.\n// If common inversion mechanism is used start and end bounds cannot be inverted independently\n// because of rounding issues which may add or remove categories to the new bounds.\nconst moveBandScaleBounds = (\n  scale: ScaleObject, bounds: DomainBounds, delta: number,\n): DomainBounds => {\n  const domain = scale.domain();\n  const fullRange = scale.range();\n  const step = (fullRange[1] - fullRange[0]) / domain.length;\n  const rangeStep = adjustBandScaleMoveStep(delta, step);\n  if (rangeStep === 0) {\n    return bounds;\n  }\n  const range = scaleBounds(scale, bounds);\n  const range0 = Math.round((range[0] - fullRange[0]) / step);\n  const range1 = range0 + Math.round((range[1] - range[0]) / step) - 1;\n  let new0 = range0 + rangeStep;\n  let new1 = range1 + rangeStep;\n  if (new0 < 0) {\n    new0 = 0;\n    new1 = new0 + range1 - range0;\n  }\n  if (new1 > domain.length - 1) {\n    new1 = domain.length - 1;\n    new0 = new1 - range1 + range0;\n  }\n  if (new0 === range0 || new1 === range1) {\n    return bounds;\n  }\n  return [domain[new0], domain[new1]];\n};\n\n// Defines how much linear scale can be zoomed it.\n// I.e. if original scale domain has size of 1, then fully zoomed scale domain has size\n// of 1 / LINEAR_SCALE_ZOOMING_THRESHOLD.\nconst LINEAR_SCALE_ZOOMING_THRESHOLD = 1000;\n\nconst growLinearScaleBounds = (\n  scale: ScaleObject, bounds: DomainBounds, delta: number, anchor: number,\n): DomainBounds => {\n  const fullRange = scale.range();\n  const minRangeThreshold = (fullRange[1] - fullRange[0]) / LINEAR_SCALE_ZOOMING_THRESHOLD;\n  const sign = Math.sign(fullRange[1] - fullRange[0]);\n  const range = scaleBounds(scale, bounds);\n  // If zooming in and initial range is already too small then do nothing.\n  if (delta > 0 && Math.abs(range[1] - range[0]) <= Math.abs(minRangeThreshold)) {\n    return bounds;\n  }\n  // If zooming out and initial range is already too large then do nothing.\n  if (delta < 0 && Math.abs(range[1] - range[0]) >= Math.abs(fullRange[1] - fullRange[0])) {\n    return bounds;\n  }\n  const t = Math.abs((anchor - range[0]) / (range[1] - range[0]));\n  let r0 = range[0] + sign * delta * 2 * t;\n  let r1 = range[1] - sign * delta * 2 * (1 - t);\n  // If new range is outside of the left border then clamp it.\n  if (Math.sign(r0 - fullRange[0]) !== sign) {\n    r0 = fullRange[0];\n  }\n  // If new range is outside of the right border then clamp it.\n  if (Math.sign(fullRange[1] - r1) !== sign) {\n    r1 = fullRange[1];\n  }\n  // If new range is too small then make it no less than minimal available.\n  if (Math.sign(r1 - r0) !== sign || Math.abs(r1 - r0) < Math.abs(minRangeThreshold)) {\n    if (Math.abs(r0 - range[0]) < Math.abs(minRangeThreshold / 2)) {\n      // Dock it to the start.\n      r0 = range[0];\n      r1 = r0 + minRangeThreshold;\n    } else if (Math.abs(r1 - range[1]) < Math.abs(minRangeThreshold / 2)) {\n      // Dock it to the end.\n      r1 = range[1];\n      r0 = r1 - minRangeThreshold;\n    } else {\n      // Dock it to the anchor.\n      r0 = anchor - minRangeThreshold / 2;\n      r1 = anchor + minRangeThreshold / 2;\n    }\n  }\n  const newBounds: DomainBounds = [scale.invert!(r0), scale.invert!(r1)];\n  return rangesEqual(bounds, newBounds) ? bounds : newBounds;\n};\n\nconst growBandScaleBounds = (\n  scale: ScaleObject, bounds: DomainBounds, delta: number, anchor: number,\n): DomainBounds => {\n  const domain = scale.domain();\n  const fullRange = scale.range();\n  const step = (fullRange[1] - fullRange[0]) / domain.length;\n  const range = scaleBounds(scale, bounds);\n  const range0 = Math.round((range[0] - fullRange[0]) / step);\n  const range1 = range0 + Math.round((range[1] - range[0]) / step) - 1;\n  // Let it be always 1 for now.\n  const rangeStep = Math.sign(delta);\n  if (\n    (rangeStep === 0) ||\n    (rangeStep > 0 && range0 === range1) ||\n    (rangeStep < 0 && range0 === 0 && range1 === domain.length - 1)\n  ) {\n    return bounds;\n  }\n  const t = Math.abs((anchor - range[0]) / (range[1] - range[0]));\n  let new0 = range0 + Math.round(rangeStep * 2 * t);\n  let new1 = range1 - Math.round(rangeStep * 2 * (1 - t));\n  if (new0 < 0) {\n    new0 = 0;\n  }\n  if (new1 > domain.length - 1) {\n    new1 = domain.length - 1;\n  }\n  if (new0 > new1) {\n    if (t <= 0.5) {\n      new1 = new0;\n    } else {\n      new0 = new1;\n    }\n  }\n  if (new0 === range0 && new1 === range1) {\n    return bounds;\n  }\n  return [domain[new0], domain[new1]];\n};\n\nconst invertLinearScaleBounds = (scale: ScaleObject, range: NumberArray): DomainBounds => {\n  const fullRange = scale.range();\n  const match = Math.sign(fullRange[1] - fullRange[0]) === Math.sign(range[1] - range[0]);\n  return [\n    scale.invert!(range[match ? 0 : 1]),\n    scale.invert!(range[match ? 1 : 0]),\n  ];\n};\n\nconst matchPointToBand = (domain: DomainItems, range: NumberArray, p: number) => {\n  const i = Math.floor(domain.length * (p - range[0]) / (range[1] - range[0]));\n  return domain[Math.min(i, domain.length - 1)];\n};\n\nconst invertBandScaleBounds = (scale: ScaleObject, range: NumberArray): DomainBounds => {\n  const domain = scale.domain();\n  const fullRange = scale.range();\n  return [\n    matchPointToBand(domain, fullRange, range[0]),\n    matchPointToBand(domain, fullRange, range[1]),\n  ];\n};\n\n// Though these functions are used only in *Viewport* plugin (and so should be placed right there),\n// they reside here so that internal scale specifics (*getWidth*)\n// are encapsulated in this utility file.\n/** @internal */\nexport const scaleBounds = makeScaleHelper(scaleLinearBounds, scaleBandBounds);\n/** @internal */\nexport const moveBounds = makeScaleHelper(moveLinearScaleBounds, moveBandScaleBounds);\n// \"scaleBounds\" would be a better name but \"scale\" is already occupied.\n/** @internal */\nexport const growBounds = makeScaleHelper(growLinearScaleBounds, growBandScaleBounds);\n/** @internal */\nexport const invertBoundsRange = makeScaleHelper(invertLinearScaleBounds, invertBandScaleBounds);\n","import { extent } from 'd3-array';\nimport {\n  getValueDomainName, scaleLinear, scaleBand, rangesEqual, makeScale,\n} from '../../utils/scale';\nimport { ARGUMENT_DOMAIN, VALUE_DOMAIN } from '../../constants';\nimport {\n  Series, PointList, DomainItems, DomainInfoCache, BuildScalesFn, DomainInfo, DomainOptions,\n  AddDomainFn, MergeDomainsFn, GetItemFn, GetDomainItemsFn,\n  FactoryFn, ExtendDomainsFn, NumberArray,\n} from '../../types';\n\nconst makeDomain = ({ factory, modifyDomain }: DomainOptions): DomainInfo => ({\n  domain: [],\n  factory,\n  isDiscrete: !!(factory && isDiscrete(factory)),\n  modifyDomain,\n});\n\n/** @internal */\nexport const defaultDomains: DomainInfoCache = {\n  [ARGUMENT_DOMAIN]: makeDomain({}),\n  [VALUE_DOMAIN]: makeDomain({}),\n};\n/** @internal */\nexport const addDomain: AddDomainFn = (domains, name, options) => ({\n  ...domains,\n  [name]: makeDomain(options),\n});\n\nconst mergeContinuousDomains: MergeDomainsFn = (domain, items) => {\n  const newDomain = extent([...domain, ...items]);\n  return rangesEqual(newDomain as any, domain as any) ? domain : newDomain;\n};\n\nconst mergeDiscreteDomains: MergeDomainsFn = (domain, items) => {\n  const newDomain = Array.from(new Set([...domain, ...items]));\n  return newDomain.length === domain.length ? domain : newDomain;\n};\n\nconst getArgument: GetItemFn = point => point.argument;\nconst getValue: GetItemFn = point => point.value;\n\nconst guessFactory = (points: PointList, getItem: GetItemFn) => (\n  points.length && typeof getItem(points[0]) === 'string' ? scaleBand : scaleLinear\n);\n\nconst isDiscrete = (factory: FactoryFn) => 'bandwidth' in factory();\n\nconst updateDomainFactory = (domain: DomainInfo, series: Series, getItem: GetItemFn) => {\n  if (domain.factory) {\n    return domain;\n  }\n  const factory = guessFactory(series.points, getItem);\n  return {\n    ...domain,\n    factory,\n    isDiscrete: isDiscrete(factory),\n  };\n};\n\n/** @internal */\nexport const updateDomainItems = (domain: DomainInfo, items: DomainItems): DomainInfo => {\n  const merge = domain.isDiscrete ? mergeDiscreteDomains : mergeContinuousDomains;\n  const merged = merge(domain.domain, items);\n  return merged === domain.domain ? domain : {\n    ...domain,\n    domain: domain.modifyDomain ? domain.modifyDomain(merged) : merged,\n  };\n};\n\nconst getArgumentDomainItems: GetDomainItemsFn = series => series.points.map(getArgument);\n\nconst getValueDomainItems: GetDomainItemsFn = (series) => {\n  const items = series.points.map(getValue);\n  return series.getPointTransformer.isStartedFromZero ? [0, ...items] : items;\n};\n\nconst updateDomain = (\n  domain: DomainInfo, series: Series, getItem: GetItemFn, getDomainItems: GetDomainItemsFn,\n) => updateDomainItems(updateDomainFactory(domain, series, getItem), getDomainItems(series));\n\n/** @internal */\nexport const extendDomains: ExtendDomainsFn = (domains, series) => {\n  const argumentDomain = updateDomain(\n    domains[ARGUMENT_DOMAIN], series, getArgument, getArgumentDomainItems);\n  const valueDomainName = getValueDomainName(series.scaleName);\n  const valueDomain = updateDomain(\n    domains[valueDomainName], series, getValue, getValueDomainItems);\n  const changes = {};\n  if (argumentDomain !== domains[ARGUMENT_DOMAIN]) {\n    changes[ARGUMENT_DOMAIN] = argumentDomain;\n  }\n  if (valueDomain !== domains[valueDomainName]) {\n    changes[valueDomainName] = valueDomain;\n  }\n  return Object.keys(changes).length ? { ...domains, ...changes } : domains;\n};\n\n/** @internal */\nexport const buildScales: BuildScalesFn = (domains, ranges) => {\n  const scales = {};\n  Object.keys(domains).forEach((name) => {\n    scales[name] = makeScale(\n      domains[name],\n      ranges[name === ARGUMENT_DOMAIN ? ARGUMENT_DOMAIN : VALUE_DOMAIN] as NumberArray,\n    );\n  });\n  return scales;\n};\n","import { Size } from '@devexpress/dx-react-core';\nimport {\n  ARGUMENT_DOMAIN, VALUE_DOMAIN,\n} from '../../constants';\nimport {\n  BBoxes, BBoxesChange, RangesCache, NumberArray,\n} from '../../types';\n\nconst isEqual = (\n  { width: firstWidth, height: firstHeight }: Size,\n  { width: secondWidth, height: secondHeight }: Size,\n) => firstWidth === secondWidth && firstHeight === secondHeight;\n\n/** @internal */\nexport const bBoxes = (prevBBoxes: BBoxes, { bBox, placeholder }: BBoxesChange) => {\n  if (isEqual(prevBBoxes[placeholder] || {}, bBox)) return prevBBoxes;\n  return { ...prevBBoxes, [placeholder]: bBox };\n};\n\n/** @internal */\nexport const getRanges = (paneSize: Size, rotated: boolean): RangesCache => {\n  const horRange: NumberArray = [0, paneSize.width];\n  const verRange: NumberArray = [paneSize.height, 0];\n  return {\n    [ARGUMENT_DOMAIN]: rotated ? verRange : horRange,\n    [VALUE_DOMAIN]: rotated ? horRange : verRange,\n  };\n};\n","import { isHorizontal } from '../../utils/scale';\nimport {\n  LEFT, RIGHT, TOP, BOTTOM, MIDDLE, END, START,\n} from '../../constants';\nimport {\n  ScaleObject, GetFormatFn, ProcessTickFn, TickFormatFn, NumberArray, GetTickCoordinatesFn,\n  TickCoordinatesGetterFn, Tick, Grid,\n} from '../../types';\n\nconst getTicks = (scale: ScaleObject, count: number) => (\n  scale.ticks ? scale.ticks(count) : scale.domain()\n);\n\nconst createTicks = <T>(\n  scale: ScaleObject, count: number, callback: ProcessTickFn<T>,\n): ReadonlyArray<T> => (\n  getTicks(scale, count)\n    .map((tick, index) => callback(scale(tick), String(index), tick))\n);\n\nconst getFormat = (scale: ScaleObject, count: number, tickFormat?: TickFormatFn): GetFormatFn => {\n  if (scale.tickFormat) {\n    return tickFormat ? tickFormat(scale, count) : scale.tickFormat(count);\n  }\n  return tick => tick;\n};\n\nconst rotatedPositions = {\n  [LEFT]: BOTTOM,\n  [RIGHT]: TOP,\n  [BOTTOM]: LEFT,\n  [TOP]: RIGHT,\n};\n\nconst positionFlags = {\n  [LEFT]: false,\n  [RIGHT]: false,\n  [BOTTOM]: true,\n  [TOP]: true,\n};\n\n/** @internal */\nexport const getRotatedPosition = (position: string) => rotatedPositions[position];\n\n/** @internal */\nexport const isValidPosition = (position: string, scaleName: string, rotated: boolean) =>\n  positionFlags[position] === isHorizontal(scaleName, rotated);\n\nconst createHorizontalOptions = (position: string, tickSize: number, indentFromAxis: number) => {\n  // Make *position* orientation agnostic - should be START or END.\n  const isStart = position === BOTTOM;\n  return {\n    y1: 0,\n    y2: isStart ? +tickSize : -tickSize,\n    yText: isStart ? +indentFromAxis : -indentFromAxis,\n    dy: isStart ? '1em' : '0em',\n    textAnchor: MIDDLE,\n  };\n};\n\nconst createVerticalOptions = (position: string, tickSize: number, indentFromAxis: number) => {\n  // Make *position* orientation agnostic - should be START or END.\n  const isStart = position === LEFT;\n  return {\n    x1: 0,\n    x2: isStart ? -tickSize : +tickSize,\n    xText: isStart ? -indentFromAxis : +indentFromAxis,\n    dy: '0.3em',\n    textAnchor: isStart ? END : START,\n  };\n};\n\n// Constant is selected to preserve original behavior described in\n// https://github.com/d3/d3-scale#continuous_ticks.\nconst DEFAULT_TICK_COUNT = 10;\nconst getTickCount = (scaleRange: NumberArray, paneSize: number) => {\n  const rangeToPaneRatio = Math.abs(scaleRange[0] - scaleRange[1]) / paneSize;\n  return Math.round(DEFAULT_TICK_COUNT * (isFinite(rangeToPaneRatio) ? rangeToPaneRatio : 1));\n};\n\nconst createTickFilter = (isHor: boolean, size: number) => (\n  isHor\n    ? (tick: any) => tick.x1 >= 0 && tick.x1 <= size\n    : (tick: any) => tick.y1 >= 0 && tick.y1 <= size\n);\n\n/** @internal */\nexport const tickCoordinatesGetter: TickCoordinatesGetterFn<Tick> = ({\n  isHor, scale, tickCount, tickFormat, position, tickSize, indentFromAxis,\n}) => {\n  const formatTick = getFormat(scale!, tickCount!, tickFormat);\n  const options = (isHor ? createHorizontalOptions : createVerticalOptions)(\n    position!, tickSize!, indentFromAxis!,\n  );\n  return (coordinates, key, tick) => ({\n    key,\n    x1: coordinates,\n    x2: coordinates,\n    y1: coordinates,\n    y2: coordinates,\n    xText: coordinates,\n    yText: coordinates,\n    text: formatTick(tick),\n    ...options,\n  });\n};\n\n/** @internal */\nexport const gridCoordinatesGetter: TickCoordinatesGetterFn<Grid> = ({ isHor }) => {\n  const options = isHor ? { y1: 0 } : { x1: 0 };\n  return (coordinates, key) => ({\n    key,\n    x1: coordinates,\n    y1: coordinates,\n    ...options,\n  });\n};\n\n/** @internal */\nexport const getTickCoordinates: GetTickCoordinatesFn<Tick | Grid> = ({\n  scaleName, scale, paneSize, rotated, callback, ...restProps\n}) => {\n  const isHor = isHorizontal(scaleName, rotated);\n  const tickCount = getTickCount(scale.range(), paneSize[1 - Number(isHor)]);\n  const ticks = createTicks(scale, tickCount, callback({ isHor, scale, tickCount, ...restProps }));\n  const visibleTicks = ticks.filter(createTickFilter(isHor, paneSize[1 - Number(isHor)]));\n  return {\n    ticks: visibleTicks,\n    sides: [Number(isHor), Number(!isHor)],\n  };\n};\n","import {\n  symbol,\n  symbolCircle,\n  line,\n  curveMonotoneX,\n  curveMonotoneY,\n  area,\n  arc,\n  pie,\n} from 'd3-shape';\nimport {\n  SeriesList, Series, PointList, Point, DataItems, AddSeriesFn, ScalesCache, ScaleSeriesPointsFn,\n  GetPointTransformerFn, Colors, Rect,\n  BarSeries, ScatterSeries, PieSeries,\n  PointComponentProps, PathFn, PathStartCoordinates, PathEndCoordinates, Scales,\n} from '../../types';\nimport { Size } from '@devexpress/dx-react-core';\nimport { ARGUMENT_DOMAIN } from '../../constants';\nimport { getValueDomainName, getWidth, rangesEqual } from '../../utils/scale';\n\nconst getArg = ({ arg }: PointComponentProps) => arg;\nconst getVal = ({ val }: PointComponentProps) => val;\nconst getStartVal = ({ startVal }: PointComponentProps) => startVal!;\n\n/** @internal */\nexport const dArea: PathFn = area<PointComponentProps>()\n  .x(getArg)\n  .y1(getVal)\n  .y0(getStartVal) as any;\n\n/** @internal */\nexport const dRotateArea: PathFn = area<PointComponentProps>()\n  .x1(getStartVal)\n  .x0(getVal)\n  .y(getArg) as any;\n\n/** @internal */\nexport const dLine: PathFn = line<PointComponentProps>()\n  .x(getArg)\n  .y(getVal) as any;\n\n/** @internal */\nexport const dRotateLine = line<PointComponentProps>()\n  .x(getVal)\n  .y(getArg) as any;\n\n/** @internal */\nexport const dSpline: PathFn = line<PointComponentProps>()\n  .x(getArg)\n  .y(getVal)\n  .curve(curveMonotoneX) as any;\n\n/** @internal */\nexport const dRotateSpline: PathFn = line<PointComponentProps>()\n  .x(getVal)\n  .y(getArg)\n  .curve(curveMonotoneY) as any;\n\n/** @internal */\nexport const dBar = (\n  arg: number, val: number, startVal: number, width: number, rotated: boolean,\n) => {\n  const height = Math.abs(val - startVal!);\n  const minVal = Math.min(val, startVal!);\n  return {\n    x: rotated ? minVal : arg - width / 2,\n    y: rotated ? arg - width / 2 : minVal,\n    width: rotated ? height : width || 2,\n    height: rotated ? width || 2 : height,\n  };\n};\n\n/** @internal */\nexport const getPiePointTransformer: GetPointTransformerFn = ({\n  argumentScale, valueScale, points,\n}) => {\n  const x = Math.max(...argumentScale.range()) / 2;\n  const y = Math.max(...valueScale.range()) / 2;\n  const maxRadius = Math.min(x, y);\n  const pieData = pie<Point>().sort(null).value(d => d.value)(points as Point[]);\n  return (point) => {\n    const { startAngle, endAngle } = pieData[point.index];\n    return {\n      ...point,\n      arg: x,\n      val: y,\n      startAngle,\n      endAngle,\n      maxRadius,\n    };\n  };\n};\n\n/** @internal */\nexport const getLinePointTransformer: GetPointTransformerFn = ({\n  argumentScale, valueScale,\n}) => point => ({\n  ...point,\n  arg: argumentScale(point.argument),\n  val: valueScale(point.value),\n} as any);\n\n// Though transformations for line and scatter are the same,\n// separate function instance is required as it contains additional static fields.\n/** @internal */\nexport const getScatterPointTransformer: GetPointTransformerFn = (\n  ...args\n) => getLinePointTransformer(...args);\n\n/** @internal */\nexport const getAreaPointTransformer: GetPointTransformerFn = (series) => {\n  const transform = getLinePointTransformer(series);\n  const startVal = series.valueScale(0);\n  return (point) => {\n    const ret = transform(point);\n    return {\n      ...ret,\n      startVal,\n    };\n  };\n};\n// Used for domain calculation and stacking.\ngetAreaPointTransformer.isStartedFromZero = true;\n\n/** @internal */\nexport const getBarPointTransformer: GetPointTransformerFn = ({\n  argumentScale, valueScale,\n}) => {\n  const startVal = valueScale(0);\n  return point => ({\n    ...point,\n    arg: argumentScale(point.argument),\n    val: valueScale(point.value),\n    startVal,\n    maxBarWidth: getWidth(argumentScale),\n  } as any);\n};\n// Used for domain calculation and stacking.\ngetBarPointTransformer.isStartedFromZero = true;\n// Used for Bar grouping.\ngetBarPointTransformer.isBroad = true;\n\ngetPiePointTransformer.getPointColor = (palette, index) => palette[index % palette.length];\n\n/** @internal */\nexport const findSeriesByName = (\n  name: symbol, series: SeriesList,\n): Series => series.find(seriesItem => seriesItem.symbolName === name) as Series;\n\n/** @internal */\nexport const dSymbol = (\n  { size }: ScatterSeries.PointOptions,\n) => symbol().size(size ** 2).type(symbolCircle)()!;\n\n/** @internal */\nexport const dPie = (\n  maxRadius: number, innerRadius: number, outerRadius: number, startAngle: number, endAngle: number,\n) => arc()({\n  startAngle,\n  endAngle,\n  innerRadius: innerRadius * maxRadius,\n  outerRadius: outerRadius * maxRadius,\n})!;\n\nconst getRect = (\n  cArg: number, cVal: number, dArg: number, dVal: number, rotated: boolean,\n): Rect => {\n  const minArg = cArg - dArg;\n  const minVal = cVal - dVal;\n  const maxArg = cArg + dArg;\n  const maxVal = cVal + dVal;\n  return rotated ? [minVal, minArg, maxVal, maxArg] : [minArg, minVal, maxArg, maxVal];\n};\n\ngetBarPointTransformer.getTargetElement = (point) => {\n  const {\n    arg, val, startVal, barWidth, maxBarWidth, rotated,\n  } = point as BarSeries.PointProps;\n  const halfWidth = barWidth * maxBarWidth / 2;\n  const halfHeight = Math.abs(startVal! - val) / 2;\n  const centerVal = (val + startVal!) / 2;\n  return getRect(arg, centerVal, halfWidth, halfHeight, rotated);\n};\n\ngetPiePointTransformer.getTargetElement = (point) => {\n  const {\n    arg: x, val: y, innerRadius, outerRadius, maxRadius, startAngle, endAngle,\n  } = point as PieSeries.PointProps;\n  const center = arc().centroid({\n    startAngle,\n    endAngle,\n    innerRadius: innerRadius * maxRadius,\n    outerRadius: outerRadius * maxRadius,\n  });\n  const cx = center[0] + x;\n  const cy = center[1] + y;\n  return getRect(cx, cy, 0.5, 0.5, false);\n};\n\ngetAreaPointTransformer.getTargetElement = ({ arg, val, rotated }) => (\n  getRect(arg, val, 1, 1, rotated)\n);\n\ngetLinePointTransformer.getTargetElement = getAreaPointTransformer.getTargetElement;\n\ngetScatterPointTransformer.getTargetElement = (obj) => {\n  const { arg, val, point, rotated } = obj as ScatterSeries.PointProps;\n  const t = point.size / 2;\n  return getRect(arg, val, t, t, rotated);\n};\n\nconst getUniqueName = (list: SeriesList, name: string) => {\n  const names = new Set(list.map(item => item.name));\n  let ret = name;\n  while (names.has(ret)) {\n    // @ts-ignore\n    ret = ret.replace(/\\d*$/, str => (str ? +str + 1 : 0));\n  }\n  return ret;\n};\n\n// TODO: Memoization is much needed here.\n// Though \"series\" list never persists, single \"series\" item most often does.\nconst createPoints = (\n  {\n    argumentField, valueField, getPointTransformer,\n  }: Series,\n  data: DataItems, props: any, palette: Colors,\n): PointList => {\n  const points: Point[] = [];\n  data.forEach((dataItem, index) => {\n    const argument = dataItem[argumentField];\n    const value = dataItem[valueField];\n    if (argument !== undefined && value !== undefined) {\n      points.push({\n        argument,\n        value,\n        index,\n        ...props,\n        color: getPointTransformer.getPointColor\n          ? getPointTransformer.getPointColor(palette, index) : props.color,\n      });\n    }\n  });\n  return points;\n};\n\n/** @internal */\nexport const addSeries: AddSeriesFn = (\n  series, data, palette, props, restProps,\n) => {\n  // It is used to generate unique series dependent attribute names for patterns.\n  // *symbolName* cannot be used as it cannot be part of DOM attribute name.\n  const index = series.length;\n  const seriesColor = props.color || palette[index % palette.length];\n  return [...series, {\n    ...props,\n    index,\n    name: getUniqueName(series, props.name),\n    points: createPoints(props, data, { ...restProps, color: seriesColor }, palette),\n    color: seriesColor,\n  }];\n};\n\n// TODO: Memoization is much needed here by the same reason as in \"createPoints\".\n// Make \"scales\" persistent first.\nconst scalePoints = (series: Series, scales: ScalesCache, rotated: boolean) => {\n  const transform = series.getPointTransformer({\n    ...series,\n    argumentScale: scales[ARGUMENT_DOMAIN],\n    valueScale: scales[getValueDomainName(series.scaleName)],\n  });\n  const ret: Series = {\n    ...series,\n    rotated,\n    points: series.points.map(point => ({\n      ...transform(point),\n      rotated,\n    })),\n  };\n  return ret;\n};\n\n/** @internal */\nexport const scaleSeriesPoints: ScaleSeriesPointsFn = (\n  series, scales, rotated,\n) => series.map(seriesItem => scalePoints(seriesItem, scales, rotated));\n\n/** @internal */\nexport const getVisibility = (\n  pane: Size, centerX: number, centerY: number, width: number, height: number,\n) => {\n  return (centerX - width / 2 < 0 && centerX + width / 2 < 0)\n  || (centerX - width / 2 > pane.width && centerX + width / 2 > pane.width)\n  || (centerY - height / 2 < 0 && centerY + height / 2 < 0)\n  || (centerY - height / 2 > pane.height && centerY + height / 2 > pane.height) ?\n  'hidden' : 'visible';\n};\n\n/** @internal */\nexport const adjustBarSize = (\n  bar: { width: number, height: number, x: number, y: number }, { width, height }: Size,\n) => {\n  const x = Math.max(0, bar.x);\n  const y = Math.max(0, bar.y);\n  return {\n    x,\n    y,\n    width: Math.min(width, bar.x + bar.width) - x,\n    height: Math.min(height, bar.y + bar.height) - y,\n  };\n};\n\n/** @internal */\nexport const isValuesChanged = (previous: any, current: any): boolean => {\n  return Object.entries(previous).some(el => el[1] !== current[el[0]]);\n};\n\n/** @internal */\nexport const isCoordinatesChanged = (\n  { coordinates: prevCoordinates }: PathStartCoordinates, { coordinates }: PathEndCoordinates,\n) => {\n  if (prevCoordinates.length !== coordinates.length) {\n    return true;\n  }\n  return prevCoordinates.some((el, index) => {\n    return el.arg !== coordinates[index].arg || el.val !== coordinates[index].val;\n  });\n};\n\n/** @internal */\nexport const isScalesChanged = (previous: Scales, current: Scales): boolean => {\n  return !rangesEqual(previous.argScale.range(), current.argScale.range()) ||\n  !rangesEqual(previous.valScale.range(), current.valScale.range());\n};\n","import { stack } from 'd3-shape';\nimport { scaleBand } from 'd3-scale';\nimport {\n  SeriesList, Series, Point, GetPointTransformerFn, DataItems, DomainInfoCache,\n  StackList, GetPointTransformerFnRaw, BarSeries, StackedPoint, StackMap, GetStackedSeriesFn,\n  SeriesPositions, StacksKeys, StackedDataItems, OffsetFn, OrderFn,\n  StackedData, GetStackedDomainsFn,\n} from '../../types';\nimport { extendDomains, updateDomainItems } from '../scale/computeds';\nimport { getValueDomainName } from '../../utils/scale';\n\n// \"Stack\" plugin relies on \"data\" and \"series\" getters and\n// knowledge about \"getPointTransformer\" and \"path\" functions behavior.\nconst buildSeriesToStackMap = (stacks: StackList): StackMap => {\n  const result = {};\n  stacks.forEach(({ series }, i) => {\n    series.forEach((name) => {\n      result[name] = i;\n    });\n  });\n  return result;\n};\n\nconst getStackedPointTransformer = (getPointTransformer: GetPointTransformerFn) => {\n  const wrapper: GetPointTransformerFnRaw = (series) => {\n    const transform = getPointTransformer(series);\n    const { valueScale } = series;\n    return (point: Point) => {\n      const ret = transform(point);\n      return {\n        ...ret,\n        startVal: valueScale((point as StackedPoint).value0),\n      };\n    };\n  };\n  // Preserve static fields of original transformer.\n  Object.assign(wrapper, getPointTransformer);\n  return wrapper as GetPointTransformerFn;\n};\n\nconst collectStacks = (\n  seriesList: SeriesList, seriesToStackMap: StackMap,\n  stacksKeys: StacksKeys, seriesPositions: SeriesPositions,\n) => {\n  seriesList.forEach(({ name, valueField }) => {\n    const stackId = seriesToStackMap[name];\n    if (stackId === undefined) {\n      return;\n    }\n\n    if (!stacksKeys[stackId]) {\n      stacksKeys[stackId] = [];\n    }\n    seriesPositions[name] = stacksKeys[stackId].length;\n    stacksKeys[stackId].push(valueField);\n  });\n  // Stack cannot consist of single series.\n  Object.keys(stacksKeys).forEach((stackId) => {\n    if (stacksKeys[stackId].length === 1) {\n      delete stacksKeys[stackId];\n    }\n  });\n};\n\nconst getStackedData = (\n  stacksKeys: StacksKeys, dataItems: DataItems, offset: OffsetFn, order: OrderFn,\n): StackedData => {\n  const result = {};\n  Object.keys(stacksKeys).forEach((stackId) => {\n    result[stackId] = stack().keys(stacksKeys[stackId])\n      .order(order as any)\n      .offset(offset as any)(dataItems as any);\n  });\n  return result;\n};\n\nconst buildStackedSeries = (series: Series, dataItems: StackedDataItems): Series => {\n  const points = series.points.map((point) => {\n    const [value0, value] = dataItems[point.index];\n    return { ...point, value, value0 };\n  });\n  const stackedSeries = {\n    ...series,\n    points,\n    isStacked: true,\n  };\n  if (series.getPointTransformer.isStartedFromZero) {\n    stackedSeries.getPointTransformer = getStackedPointTransformer(series.getPointTransformer);\n  }\n  return stackedSeries;\n};\n\nconst applyStacking = (\n  seriesList: SeriesList, dataItems: DataItems, seriesToStackMap: StackMap,\n  offset: OffsetFn, order: OrderFn,\n): SeriesList => {\n  const stacksKeys: StacksKeys = {};\n  const seriesPositions: SeriesPositions = {};\n  collectStacks(seriesList, seriesToStackMap, stacksKeys, seriesPositions);\n  if (Object.keys(stacksKeys).length === 0) {\n    return seriesList;\n  }\n  const stackedData = getStackedData(stacksKeys, dataItems, offset, order);\n  return seriesList.map((seriesItem) => {\n    const stackId = seriesToStackMap[seriesItem.name];\n    const stackData = stackedData[stackId];\n    if (!stackData) {\n      return seriesItem;\n    }\n    const position = seriesPositions[seriesItem.name];\n    return buildStackedSeries(seriesItem, stackData[position]);\n  });\n};\n\nconst getGroupName = (series: Series, i: number, seriesToStackMap: StackMap) => {\n  const stackId = seriesToStackMap[series.name];\n  return stackId >= 0 ? String(stackId) : `group-${i}`;\n};\n\nconst getGroupedPointTransformer = (\n  getPointTransformer: GetPointTransformerFn, groupCount: number, groupOffset: number,\n) => {\n  const wrapper: GetPointTransformerFnRaw = (series) => {\n    const transform = getPointTransformer(series);\n    const widthCoeff = 1 / groupCount;\n    return (point) => {\n      const original = transform(point) as BarSeries.PointProps;\n      const arg = (\n        original.arg - original.maxBarWidth * (0.5 - 0.5 * widthCoeff - groupOffset * widthCoeff)\n      );\n      const result: BarSeries.PointProps = {\n        ...original,\n        arg,\n        maxBarWidth: original.maxBarWidth / groupCount,\n      };\n      return result;\n    };\n  };\n  // Preserve static fields of original transformer.\n  Object.assign(wrapper, getPointTransformer);\n  return wrapper as GetPointTransformerFn;\n};\n\nconst applyGrouping = (seriesList: SeriesList, seriesToStackMap: StackMap): SeriesList => {\n  const groups = new Set<string>();\n  seriesList.forEach((seriesItem, i) => {\n    if (seriesItem.getPointTransformer.isBroad) {\n      groups.add(getGroupName(seriesItem, i, seriesToStackMap));\n    }\n  });\n  // There cannot be single group.\n  if (groups.size < 2) {\n    return seriesList;\n  }\n  const scale = scaleBand().domain(Array.from(groups)).range([0, groups.size]);\n  return seriesList.map((seriesItem, i) => {\n    if (!seriesItem.getPointTransformer.isBroad) {\n      return seriesItem;\n    }\n    const getPointTransformer = getGroupedPointTransformer(\n      seriesItem.getPointTransformer,\n      groups.size,\n      scale(getGroupName(seriesItem, i, seriesToStackMap))!,\n    );\n    return {\n      ...seriesItem,\n      getPointTransformer,\n    };\n  });\n};\n\n/** @internal */\nexport const getStackedSeries: GetStackedSeriesFn = (\n  seriesList, dataItems, { stacks, offset, order },\n) => {\n  const map = buildSeriesToStackMap(stacks);\n  const stackedSeriesList = applyStacking(seriesList, dataItems, map, offset, order);\n  const groupedSeriesList = applyGrouping(stackedSeriesList, map);\n  return groupedSeriesList;\n};\n\nconst resetDomainItems = (domains: DomainInfoCache): DomainInfoCache => {\n  const result = {};\n  Object.keys(domains).forEach((key) => {\n    result[key] = { ...domains[key], domain: [] };\n  });\n  return result;\n};\n\nconst extendDomainsWithAdditionalItems = (domains: DomainInfoCache, series: Series) => {\n  const items = series.points.map(point => (point as StackedPoint).value0);\n  const key = getValueDomainName(series.scaleName);\n  const domain = updateDomainItems(domains[key], items);\n  return domain !== domains[key] ? { ...domains, [key]: domain } : domains;\n};\n\n// Stacking changes data - so computed domains have to be discarded\n// and recalculated from the new stacked data.\n/** @internal */\nexport const getStackedDomains: GetStackedDomainsFn = (domains, seriesList) => {\n  const stackedSeries = seriesList.filter(series => (series as any).isStacked);\n  if (!stackedSeries.length) {\n    return domains;\n  }\n  // Recalculate domains in a common way.\n  const rebuiltDomains = seriesList.reduce(extendDomains, resetDomainItems(domains));\n  // Take additional \"value0\" fields into account.\n  return stackedSeries.reduce(extendDomainsWithAdditionalItems, rebuiltDomains);\n};\n","import {\n  Scales, PointComponentProps, PieSeries, PathComponentProps, GetDelayFn,\n} from '../../types';\n\n/** @internal */\nexport const easeOutCubic = (t: number) => (t - 1) * (t - 1) * (t - 1) + 1;\n\n/** @internal */\nexport const getDelay: GetDelayFn = (index, isStart) => isStart ? index * 30 : 0;\n\n/** @internal */\nexport const getStartVal = (scales: Scales) => {\n  return scales.valScale.copy().clamp!(true)(0);\n};\n\n/** @internal */\nexport const getPathStart = (scales: Scales, { coordinates }: PathComponentProps) => {\n  const start = getStartVal(scales);\n  return { coordinates: coordinates.map(coord =>\n    ({ arg: coord.arg, val: start, startVal: start })) };\n};\n\n/** @internal */\nexport const getPointStart = (scales: Scales, { arg }: PointComponentProps) => {\n  const start = getStartVal(scales);\n  return { arg, val: start, startVal: start };\n};\n\n/** @internal */\nexport const getPieStart = (scales: Scales, { startAngle, endAngle }: PieSeries.PointProps) =>\n({ innerRadius: 0, outerRadius: 0, startAngle, endAngle });\n","import { SeriesRef, TargetList, NotifyPointerMoveFn, ProcessedTarget } from '../types';\n\n// Comparing by reference is not an option as Tracker always sends new objects.\n// Tracker cannot persist references as it actually operates with simple scalars\n// and constructs objects to provide info in a slightly more suitable way.\nconst compareTargets = (target1: SeriesRef, target2: SeriesRef) => (\n  target1.series === target2.series && target1.point === target2.point\n);\n\n// If *currentTarget* is among *targets* then it has priority but only while its distance\n// is not significantly greater (DISTANCE_PRIORITY_RATIO) than that of the best candidate.\nconst selectTarget = (targets: TargetList, currentTarget: SeriesRef): ProcessedTarget => {\n  const candidate = targets[0];\n  if (!currentTarget) {\n    return candidate;\n  }\n  if (!candidate) {\n    return null;\n  }\n  return compareTargets(candidate, currentTarget) ? undefined : candidate;\n};\n\n/** @internal */\nexport const processPointerMove = (\n  targets: TargetList, currentTarget: SeriesRef, notify?: NotifyPointerMoveFn,\n) => {\n  const nextTarget = selectTarget(targets, currentTarget);\n  if (nextTarget === undefined) {\n    return undefined;\n  }\n  if (notify) {\n    notify(nextTarget);\n  }\n  return nextTarget;\n};\n","import { NumberArray, Location } from '../types';\n// This function is to be called from context where DOM is available -\n// so *window* can be accessed safely.\n/** @internal */\nexport const getOffset = (element: Element): NumberArray => {\n  const { left, top } = element.getBoundingClientRect();\n  // Safer way to get window.\n  const { defaultView } = element.ownerDocument!;\n  const { pageXOffset, pageYOffset } = defaultView!;\n  return [left + pageXOffset, top + pageYOffset];\n};\n\n/** @internal */\nexport const getEventCoords = (e: any, offset: NumberArray): Location => {\n  const { pageX, pageY } = e.touches ? e.touches[0] : e;\n  return [pageX - offset[0], pageY - offset[1]];\n};\n","import { processPointerMove } from '../../utils/hover-state';\nimport { getOffset } from '../../utils/common';\nimport {\n  SeriesList, SeriesRef, TransformedPoint, TargetList, NotifyPointerMoveFn,\n  TooltipParameters, TooltipReference, Rect,\n} from '../../types';\n\n/** @internal */\nexport const getParameters = (series: SeriesList, target: SeriesRef): TooltipParameters => {\n  const currentSeries = series.find(({ name }) => target.series === name)!;\n  const item = currentSeries.points.find(point => point.index === target.point) as TransformedPoint;\n  return {\n    element: currentSeries.getPointTransformer.getTargetElement(item),\n    text: `${item.value}`,\n  };\n};\n\n/** @internal */\nexport const createReference = (\n  rect: Rect, rootRef: React.RefObject<Element>,\n): TooltipReference => ({\n  // These two fields together with *width* and *height* are left with stub data for\n  // simplicity reasons - they seem to be unused by *Popper*.\n  clientWidth: 0,\n  clientHeight: 0,\n  getBoundingClientRect() {\n    // This function is expected to be called (by the *Popper*) when DOM is ready -\n    // so *rootRef.current* can be accessed.\n    const offset = getOffset(rootRef.current!);\n    // *getBoundingClientRect* of a real html element is affected by window scrolling.\n    // *popper.js* subscribes \"html -> getBoundingClientRect -> (left, top)\" from\n    // \"reference -> getBoundingClientRect\" - so here it is added.\n    const htmlRect = rootRef.current!.ownerDocument!.documentElement.getBoundingClientRect();\n    const left = rect[0] + offset[0] + htmlRect.left;\n    const right = rect[2] + offset[0] + htmlRect.left;\n    const top = rect[1] + offset[1] + htmlRect.top;\n    const bottom = rect[3] + offset[1] + htmlRect.top;\n    return {\n      left,\n      top,\n      right,\n      bottom,\n      width: right - left,\n      height: bottom - top,\n    };\n  },\n});\n\n/** @internal */\nexport const processHandleTooltip = (\n  targets: TargetList, currentTarget: SeriesRef, onTargetItemChange?: NotifyPointerMoveFn,\n) => {\n  const filterTargets = targets.filter(target => target.point !== undefined);\n  return processPointerMove(filterTargets, currentTarget, onTargetItemChange);\n};\n","import {\n  ARGUMENT_DOMAIN, VALUE_DOMAIN,\n} from '../../constants';\nimport {\n  getValueDomainName, makeScale, scaleBounds, rangesEqual,\n  moveBounds, growBounds, invertBoundsRange,\n} from '../../utils/scale';\nimport {\n  NumberArray,\n  Viewport,\n  ScalesCache,\n  DomainInfoCache,\n  RangesCache,\n  DomainInfo,\n  DomainBounds,\n  OnViewportChangeFn,\n  ScaleObject,\n  EventHandlers,\n  Location,\n  Interaction,\n} from '../../types';\nimport { Size } from '@devexpress/dx-react-core';\n\nconst getArgumentBounds = (viewport?: Viewport): DomainBounds | null => (\n  viewport && viewport.argumentStart !== undefined && viewport.argumentEnd !== undefined\n    ? [viewport.argumentStart, viewport.argumentEnd] : null\n);\n\nconst getValueBounds = (viewport?: Viewport): DomainBounds | null => (\n  viewport && viewport.valueStart !== undefined && viewport.valueEnd !== undefined\n    ? [viewport.valueStart, viewport.valueEnd] : null\n);\n\nconst getValueScaleName = (viewport?: Viewport) => (\n  getValueDomainName(viewport && viewport.scaleName)\n);\n\nconst getDefaultBounds = (scale: ScaleObject): DomainBounds => {\n  const domain = scale.domain();\n  return [domain[0], domain[domain.length - 1]];\n};\n\nconst proportionallyExtendRange = (range: NumberArray, subRange: NumberArray): NumberArray => {\n  const p = (subRange[0] - subRange[1]) / (range[0] - range[1]);\n  const q = subRange[0] - p * range[0];\n  return [\n    (range[0] - q) / p,\n    (range[1] - q) / p,\n  ];\n};\n\nconst adjustRange = (domain: DomainInfo, bounds: DomainBounds, range: NumberArray) => {\n  const scale = makeScale(domain, range);\n  const subRange = scaleBounds(scale, bounds);\n  return rangesEqual(subRange, range) ? range : proportionallyExtendRange(range, subRange);\n};\n\nconst update = (\n  ranges: RangesCache, changes: any, key: string, domain: DomainInfo, bounds: DomainBounds,\n) => {\n  const newRange = adjustRange(domain, bounds, ranges[key]);\n  if (newRange !== ranges[key]) {\n    changes[key] = newRange;\n  }\n};\n\n/** @internal */\nexport const adjustLayout = (\n  domains: DomainInfoCache, ranges: RangesCache, viewport?: Viewport,\n) => {\n  const changes = {};\n  const argumentBounds = getArgumentBounds(viewport);\n  if (argumentBounds) {\n    update(ranges, changes, ARGUMENT_DOMAIN, domains[ARGUMENT_DOMAIN], argumentBounds);\n  }\n  const valueBounds = getValueBounds(viewport);\n  if (valueBounds) {\n    update(ranges, changes, VALUE_DOMAIN, domains[getValueScaleName(viewport)], valueBounds);\n  }\n  return Object.keys(changes).length ? { ...ranges, ...changes } : ranges;\n};\n\nconst boundsForScale = (\n  name: string, scales: ScalesCache, currentBounds: DomainBounds | null,\n  interaction: Interaction, type: Interaction, delta: number, anchor: number, range?: NumberArray,\n): DomainBounds | null => {\n  if (!checkInteraction(interaction, type)) {\n    return null;\n  }\n  const scale = scales[name];\n  const bounds = currentBounds || getDefaultBounds(scale);\n  let newBounds: DomainBounds;\n  if (type === 'pan') {\n    newBounds = moveBounds(scale, bounds, delta);\n  } else if (type === 'zoom') {\n    newBounds = range ? invertBoundsRange(scale, range) : growBounds(scale, bounds, delta, anchor);\n  }\n  return newBounds! !== bounds ? newBounds! : null;\n};\n\n/** @internal */\nexport const getViewport = (\n  scales: ScalesCache,\n  rotated: boolean,\n  [argInteraction, valInteraction]: Readonly<[Interaction, Interaction]>, type: Interaction,\n  deltas: Readonly<[number, number]> | null,\n  anchors: Readonly<number[]> | null,\n  ranges: Readonly<[NumberArray, NumberArray]> | null,\n  viewport?: Viewport, onViewportChange?: OnViewportChangeFn,\n) => {\n  const argIndex = Number(rotated);\n  const valIndex = 1 - argIndex;\n  const changes: any = {};\n  const argumentBounds = boundsForScale(\n    ARGUMENT_DOMAIN, scales, getArgumentBounds(viewport),\n    argInteraction, type,\n    deltas ? deltas[argIndex] : 0, anchors ? anchors[argIndex] : 0,\n    ranges ? ranges[argIndex] : undefined,\n  );\n  const valueBounds = boundsForScale(\n    getValueScaleName(viewport), scales, getValueBounds(viewport),\n    valInteraction, type,\n    deltas ? deltas[valIndex] : 0, anchors ? anchors[valIndex] : 0,\n    ranges ? ranges[valIndex] : undefined,\n  );\n  if (argumentBounds) {\n    changes.argumentStart = argumentBounds[0];\n    changes.argumentEnd = argumentBounds[1];\n  }\n  if (valueBounds) {\n    changes.valueStart = valueBounds[0];\n    changes.valueEnd = valueBounds[1];\n  }\n  if (Object.keys(changes).length) {\n    const newViewport = { ...viewport, ...changes };\n    if (onViewportChange) {\n      onViewportChange(newViewport);\n    }\n    return { viewport: newViewport };\n  }\n  return null;\n};\n\n/** @internal */\nexport const getDeltaForTouches = (touches: Touch[]) => {\n  const deltaX = touches[0].pageX - touches[1].pageX;\n  const deltaY = touches[0].pageY - touches[1].pageY;\n  const delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  const center: NumberArray = [\n    (touches[0].pageX + touches[1].pageX) / 2,\n    (touches[0].pageY + touches[1].pageY) / 2,\n  ];\n  return { delta, center };\n};\n\n/** @internal */\nexport const isKeyPressed = (event: MouseEvent, key: string) => event[`${key}Key`];\n\n/** @internal */\nexport const getWheelDelta = ({ wheelDelta, deltaY }: { wheelDelta?: number, deltaY?: number }) => {\n  return wheelDelta !== undefined ? wheelDelta : deltaY! * -30; // deltaY for FF\n};\n\n/** @internal */\nexport const isMultiTouch = (e: any) => e.touches && e.touches.length === 2;\n\n/** @internal */\nexport const attachEvents = (node: any, handlers: EventHandlers) => {\n  Object.keys(handlers).forEach((el) => {\n    node.addEventListener(el, handlers[el], { passive: false });\n  });\n};\n\n/** @internal */\nexport const detachEvents = (node: any, handlers: EventHandlers) => {\n  Object.keys(handlers).forEach((el) => {\n    node.removeEventListener(el, handlers[el]);\n  });\n};\n\n/** @internal */\nexport const getRect = (\n  rotated: boolean,\n  interactionWithArguments: Interaction,\n  interactionWithValues: Interaction,\n  initial: Location,\n  current: Location,\n  pane: Size,\n) => {\n  const isZoomArgument = checkInteraction(interactionWithArguments, 'zoom');\n  const isZoomValue = checkInteraction(interactionWithValues, 'zoom');\n  const isXFixed = rotated ? isZoomValue : isZoomArgument;\n  const isYFixed = rotated ? isZoomArgument : isZoomValue;\n  const x = isXFixed ? Math.min(initial[0], current[0]) : 0;\n  const width = isXFixed ? Math.abs(initial[0] - current[0]) : pane.width;\n  const y = isYFixed ? Math.min(initial[1], current[1]) : 0;\n  const height = isYFixed ? Math.abs(initial[1] - current[1]) : pane.height;\n  return {\n    x, y, width, height,\n  };\n};\n\nconst checkInteraction = (interaction: Interaction, type: Interaction) =>\ninteraction === 'both' || interaction === type;\n\n/** @internal */\nexport const setCursorType = (node: any, type?: string) => {\n  const defaultType = 'pointer';\n  node.style.cursor = type ? type : defaultType;\n};\n","import { DIFFERENCE } from '../../constants';\n\n/** @internal */\nexport const isReadyToRenderSeries = (\n  { pane, ...restLayouts }, { current },\n  isPreviousDataEmpty: boolean, axesExist: boolean,\n) => {\n  if (!pane.width && !pane.height) {\n    return false;\n  }\n  const bbox = { width: current.clientWidth, height: current.clientHeight };\n  let width = pane.width;\n  let height = pane.height;\n  Object.entries(restLayouts).forEach((el) => {\n    const orientation = el[0].split('-')[0];\n    if (orientation === 'top' || orientation === 'bottom') {\n      height += el[1].height;\n    } else {\n      width += el[1].width;\n    }\n  });\n  return Math.abs(bbox.width - width) < DIFFERENCE &&\n    Math.abs(bbox.height - height) < DIFFERENCE\n    && isPreviousDataEmptyOrNoAxes(isPreviousDataEmpty, axesExist);\n};\n\nconst isPreviousDataEmptyOrNoAxes = (\n  isPreviousDataEmpty: boolean, axesExist: boolean,\n) => !isPreviousDataEmpty || !axesExist;\n","import { area } from 'd3-shape';\nimport {\n  dArea, dRotateArea, dLine, dRotateLine, dSpline, dRotateSpline,\n} from '../plugins/series/computeds';\nimport {\n  SeriesList, TransformedPoint, PointList, TargetList, PointDistance, Location,\n  CreateHitTesterFn, MakePathFn, IsPointInPathFn,\n  HitTestPointFn, Filter,\n  BarSeries, ScatterSeries, PieSeries,\n  PathFn,\n} from '../types';\n\nconst getSegmentLength = (dx: number, dy: number) => Math.sqrt(dx * dx + dy * dy);\n\n// *distance* is a normalized distance to point.\n// It belongs to [0, Infinity):\n//  = 0 - at point center\n//  = 1 - at point border\n//  > 1 - outside point\n\n// This function is called from event handlers (when DOM is available) -\n// *window.document* can be accessed safely.\nconst createContext = () => document.createElement('canvas').getContext('2d')!;\n\n// For a start using browser canvas will suffice.\n// However a better and more clean solution should be found.\n// Can't d3 perform hit testing?\nconst createCanvasAbusingHitTester = (\n  makePath: MakePathFn, points: PointList, rotated: boolean,\n): IsPointInPathFn => {\n  const ctx = createContext();\n  const path = makePath(rotated);\n  path.context(ctx);\n  path(points as any);\n  return ([x, y]) => ctx.isPointInPath(x, y);\n};\n\nconst LINE_POINT_SIZE = 20;\nconst LINE_TOLERANCE = 10;\n\nconst getDistance = (\n  [px, py]: Location, { arg, val }: TransformedPoint, rotated: boolean,\n) => {\n  const x = rotated ? val : arg;\n  const y = rotated ? arg : val;\n  return getSegmentLength(px - x, py - y);\n};\n\nconst createContinuousSeriesHitTesterCreator =\n  (makePath: MakePathFn): CreateHitTesterFn => (points, rotated) => {\n    const fallbackHitTest = createCanvasAbusingHitTester(makePath, points, rotated);\n    return (target) => {\n      let minDistance = Number.MAX_VALUE;\n      let minIndex: number = 0;\n      const list: PointDistance[] = [];\n      points.forEach((point, i) => {\n        const distance = getDistance(target, point as TransformedPoint, rotated);\n        if (distance <= LINE_POINT_SIZE) {\n          list.push({ distance, index: point.index });\n        }\n        if (distance < minDistance) {\n          minDistance = distance;\n          minIndex = i;\n        }\n      });\n      // This is special case for continuous series - if no point is actually hit\n      // then the closest point to the pointer position is picked.\n      if (!list.length && fallbackHitTest(target)) {\n        list.push({ index: points[minIndex].index, distance: minDistance });\n      }\n      return list.length ? { points: list } : null;\n    };\n  };\n\nconst createPointsEnumeratingHitTesterCreator =\n  (hitTestPoint: HitTestPointFn): CreateHitTesterFn => (points, rotated) => (target) => {\n    const list: PointDistance[] = [];\n    points.forEach((point) => {\n      const status = hitTestPoint(target, point as TransformedPoint, rotated);\n      if (status) {\n        list.push({ index: point.index, distance: status.distance });\n      }\n    });\n    return list.length ? { points: list } : null;\n  };\n\n/** @internal */\nexport const createAreaHitTester = createContinuousSeriesHitTesterCreator((rotated) => {\n  const path: PathFn = area() as any;\n  const hitArea = rotated ? dRotateArea : dArea;\n  if (rotated) {\n    path.x1!(hitArea.x1!());\n    path.x0!(hitArea.x0!());\n    path.y(hitArea.y());\n  } else {\n    path.x(hitArea.x());\n    path.y1!(hitArea.y1!());\n    path.y0!(hitArea.y0!());\n  }\n  return path;\n});\n\n/** @internal */\nexport const createLineHitTester = createContinuousSeriesHitTesterCreator((rotated) => {\n  const path: PathFn = area() as any;\n  const hitLine = rotated ? dRotateLine : dLine;\n  if (rotated) {\n    const getX = hitLine.x();\n    path.y(hitLine.y());\n    path.x0!(point => getX(point) + LINE_TOLERANCE);\n    path.x1!(point => getX(point) - LINE_TOLERANCE);\n  } else {\n    const getY = hitLine.y();\n    path.x(hitLine.x());\n    path.y1!(point => getY(point) - LINE_TOLERANCE);\n    path.y0!(point => getY(point) + LINE_TOLERANCE);\n  }\n  return path;\n});\n\n/** @internal */\nexport const createSplineHitTester = createContinuousSeriesHitTesterCreator((rotated) => {\n  const path: PathFn = area() as any;\n  const hitSpline = rotated ? dRotateSpline : dSpline;\n  if (rotated) {\n    const getX = hitSpline.x();\n    path.y(hitSpline.y());\n    path.x1!(point => getX(point) - LINE_TOLERANCE);\n    path.x0!(point => getX(point) + LINE_TOLERANCE);\n  } else {\n    const getY = hitSpline.y();\n    path.x(hitSpline.x());\n    path.y1!(point => getY(point) - LINE_TOLERANCE);\n    path.y0!(point => getY(point) + LINE_TOLERANCE);\n  }\n  path.curve!(hitSpline.curve!());\n  return path;\n});\n\nconst hitTestRect = (dx: number, dy: number, halfX: number, halfY: number) => (\n  Math.abs(dx) <= halfX && Math.abs(dy) <= halfY ? {\n    distance: getSegmentLength(dx, dy),\n  } : null\n);\n\n// Some kind of binary search can be used here as bars can be ordered along argument axis.\n/** @internal */\nexport const createBarHitTester = createPointsEnumeratingHitTesterCreator(\n  ([px, py], point, rotated) => {\n    const {\n      arg, val, startVal, barWidth, maxBarWidth,\n    } = point as BarSeries.PointProps;\n    const halfWidth = maxBarWidth * barWidth / 2;\n    const halfHeight = Math.abs(val - startVal!) / 2;\n    const centerVal = (val + startVal!) / 2;\n    const xCenter = rotated ? centerVal : arg;\n    const yCenter = rotated ? arg : centerVal;\n    return hitTestRect(\n      px - xCenter,\n      py - yCenter,\n      rotated ? halfHeight : halfWidth,\n      rotated ? halfWidth : halfHeight,\n    );\n  },\n);\n\n/** @internal */\nexport const createScatterHitTester = createPointsEnumeratingHitTesterCreator(\n  ([px, py], obj, rotated) => {\n    const { point } = obj as ScatterSeries.PointProps;\n    const distance = getDistance([px, py], obj, rotated);\n    return distance <= point.size / 2 ? { distance } : null;\n  },\n);\n\nconst mapAngleTod3 = (angle: number) => {\n  const ret = angle + Math.PI / 2;\n  return ret >= 0 ? ret : ret + Math.PI * 2;\n};\n\n// Some kind of binary search can be used here as pies can be ordered along angle axis.\n/** @internal */\nexport const createPieHitTester = createPointsEnumeratingHitTesterCreator(\n  ([px, py], point) => {\n    const {\n      arg: x, val: y, innerRadius, outerRadius, startAngle, maxRadius, endAngle,\n    } = point as PieSeries.PointProps;\n    const inner = innerRadius * maxRadius;\n    const outer = outerRadius * maxRadius;\n    const rCenter = (inner + outer) / 2;\n    const angleCenter = (startAngle + endAngle) / 2;\n    const halfRadius = (outer - inner) / 2;\n    const halfAngle = Math.abs(startAngle - endAngle) / 2;\n    const dx = px - x;\n    const dy = py - y;\n    const r = getSegmentLength(dx, dy);\n    const angle = mapAngleTod3(Math.atan2(dy, dx));\n    // This is not a correct distance calculation but for now it will suffice.\n    // For Pie series it would not be actually used.\n    return hitTestRect(r - rCenter, angle - angleCenter, halfRadius, halfAngle);\n  },\n);\n\nconst buildFilter = (targets: TargetList): Filter => {\n  const result = {};\n  targets.forEach(({ series, point }) => {\n    (result[series] = result[series] || new Set()).add(point);\n  });\n  return result;\n};\n\n/** @internal */\nexport const changeSeriesState = (seriesList: SeriesList, targets: TargetList, state: string) => {\n  if (targets.length === 0) {\n    return seriesList;\n  }\n  const filter = buildFilter(targets);\n  let matches = 0;\n  const result = seriesList.map((seriesItem) => {\n    const set = filter[seriesItem.name];\n    if (!set) {\n      return seriesItem;\n    }\n    matches += 1;\n    const props: { state: string, points?: TransformedPoint[] } = { state };\n    if (set.size) {\n      props.points = (seriesItem.points as TransformedPoint[]).map(\n        point => (set.has(point.index) ? { ...point, state } : point),\n      );\n    }\n    return { ...seriesItem, ...props };\n  });\n  // This is to prevent false rerenders.\n  return matches > 0 ? result : seriesList;\n};\n","import { SeriesList, LegendItemList } from '../types';\n\nconst getDefaultLegendItems = (series: SeriesList): LegendItemList => series.map(\n  ({ name: text, color }) => ({ text, color }),\n);\n\nconst getPieLegendItems = (series: SeriesList): LegendItemList => series[0]\n  .points.map(({ argument: text, color }) => ({ text, color }));\n\n// The function supports special case when there is single Pie series.\n// There is no common way to tell if series is PieSeries -\n// checking `radius` props will suffice for now.\nconst isSinglePieSeriesCase = (series: SeriesList) => (\n  series.length === 1 && 'innerRadius' in series[0] && 'outerRadius' in series[0]\n);\n\n/** @internal */\nexport const getLegendItems = (series: SeriesList) => (\n  (isSinglePieSeriesCase(series) ? getPieLegendItems : getDefaultLegendItems)(series)\n);\n","import { hasWindow } from '@devexpress/dx-core';\nimport { getEventCoords, getOffset } from './common';\nimport {\n  TrackerTarget, HandlerFnList, SeriesList, HitTesters,\n  EventHandlerFn, TargetData, EventHandlers, HandlersObject,\n} from '../types';\n\nconst DISTANCE_THRESHOLD = 20;\n\nconst compareHitTargets = (t1: TrackerTarget, t2: TrackerTarget) => {\n  const distanceDelta = t1.distance - t2.distance;\n  if (Math.abs(distanceDelta) <= DISTANCE_THRESHOLD) {\n    const orderDelta = t2.order - t1.order;\n    return orderDelta !== 0 ? orderDelta : distanceDelta;\n  }\n  return distanceDelta;\n};\n\nconst buildEventHandler = (seriesList: SeriesList, handlers: HandlerFnList): EventHandlerFn => {\n  let hitTesters: HitTesters | null = null;\n\n  const createHitTesters = () => {\n    const obj: HitTesters = {};\n    seriesList.forEach((seriesItem) => {\n      obj[seriesItem.symbolName as unknown as string] = seriesItem\n      .createHitTester(seriesItem.points, seriesItem.rotated);\n    });\n    return obj;\n  };\n\n  return (e) => {\n    const location = getEventCoords(e, getOffset(e.currentTarget));\n    hitTesters = hitTesters || createHitTesters();\n    const targets: TrackerTarget[] = [];\n    seriesList.forEach(({ name: series, index: order, symbolName }) => {\n      const status = hitTesters![symbolName as unknown as string](location);\n      if (status) {\n        targets.push(...status.points.map(\n          point => ({\n            series, order, point: point.index, distance: point.distance,\n          }),\n        ));\n      }\n    });\n    targets.sort(compareHitTargets);\n    const arg: TargetData = { location, targets, event: e.nativeEvent };\n    handlers.forEach(handler => handler(arg));\n  };\n};\n\nconst buildLeaveEventHandler = (handlers: HandlerFnList): EventHandlerFn => (e) => {\n  const location = getEventCoords(e, getOffset(e.currentTarget));\n  const arg: TargetData = { location, targets: [] };\n  handlers.forEach(handler => handler(arg));\n};\n\n// The result is of Map<string, Function> type.\n// Keys are DOM event names (https://developer.mozilla.org/en-US/docs/Web/Events).\n/** @internal */\nexport const buildEventHandlers = (\n  seriesList: SeriesList, { clickHandlers, pointerMoveHandlers }: HandlersObject,\n) => {\n  const handlers: EventHandlers = {};\n  if (!hasWindow()) return handlers;\n  if (clickHandlers.length) {\n    handlers.click = buildEventHandler(seriesList, clickHandlers);\n  }\n  if (pointerMoveHandlers.length) {\n    const moveHandler = buildEventHandler(seriesList, pointerMoveHandlers);\n    const leaveHandler = buildLeaveEventHandler(pointerMoveHandlers);\n    if ('ontouchstart' in window) {\n      handlers.touchstart = moveHandler;\n    } else {\n      handlers.mousemove = moveHandler;\n      handlers.mouseleave = leaveHandler;\n    }\n  }\n  return handlers;\n};\n","import {\n  EasingFn, SetAttributeFn, AnimationFn, GetNewPositionsFn,\n  RangePointCoordinates, PointCoordinates, PointComponentProps,\n  PieCoordinates, PathStartCoordinates, PathEndCoordinates,\n} from '../types';\n\n/** @internal */\nconst getProgress = ({ elapsed, total }: {elapsed: number, total: number}) =>\nMath.min(elapsed / total, 1);\n\n/** @internal */\nconst runAnimation = (\n  setAttributes: SetAttributeFn,\n  getNewPositions: GetNewPositionsFn,\n  easing: EasingFn, duration: number, delay: number,\n) => new Promise((resolve) => {\n  setTimeout(() => {\n    const time = {\n      start: Date.now(),\n      total: duration,\n      elapsed: 0,\n    };\n    const step = () => {\n      time.elapsed = Date.now() - time.start;\n      const progress = getProgress(time);\n      setAttributes(getNewPositions(easing(progress)));\n\n      if (progress < 1) requestAnimationFrame(step);\n    };\n    resolve(requestAnimationFrame(step));\n  }, delay);\n});\n\n/** @internal */\nexport const buildAnimation = (easing: EasingFn, duration: number): AnimationFn => (\n  startCoords, endCoords, processAnimation, setAttributes, delay = 0,\n) => {\n  let animationID;\n\n  const stop = () => {\n    if (animationID) {\n      cancelAnimationFrame(animationID);\n      animationID = undefined;\n    }\n  };\n\n  const run = (start, end, delayValue) => {\n    animationID = runAnimation(\n      setAttributes, processAnimation(start, end),\n      easing, duration, delayValue,\n    ).then((res) => {\n      animationID = res;\n    });\n  };\n\n  run(startCoords, endCoords, delay);\n\n  return {\n    update: (updatedStartCoords, updatedEndCoords, updatedDelay = 0) => {\n      stop();\n      run(updatedStartCoords, updatedEndCoords, updatedDelay);\n    },\n    stop,\n  };\n};\n\nconst lerp = (a: number, b: number, t: number) => a + t * (b - a);\n\n/** @internal */\nexport const processPointAnimation = (\n  startCoords: PointCoordinates, endCoords: PointComponentProps,\n) => {\n  return (progress: number) => {\n    return {\n      arg: lerp(startCoords.arg, endCoords.arg, progress),\n      val: lerp(startCoords.val, endCoords.val, progress),\n    };\n  };\n};\n\n/** @internal */\nexport const processBarAnimation = (\n  startCoords: RangePointCoordinates, endCoords: PointComponentProps,\n) => {\n  return (progress: number) => {\n    return {\n      arg: lerp(startCoords.arg, endCoords.arg, progress),\n      val: lerp(startCoords.val, endCoords.val, progress),\n      startVal: lerp(startCoords.startVal, endCoords.startVal, progress),\n    };\n  };\n};\n\n/** @internal */\nexport const processLineAnimation = (\n  { coordinates }: PathStartCoordinates,\n  { coordinates: endCoordinates }: PathEndCoordinates,\n) => {\n  return (progress: number) => {\n    return {\n      coordinates: endCoordinates.map((coord, index) => {\n        const startCurCoord = coordinates[index];\n        return {\n          ...coord,\n          arg: lerp(startCurCoord.arg, coord.arg, progress),\n          val: lerp(startCurCoord.val, coord.val, progress),\n        };\n      }),\n    };\n  };\n};\n\n/** @internal */\nexport const processAreaAnimation = (\n  { coordinates }: PathStartCoordinates,\n  { coordinates: endCoordinates }: PathEndCoordinates,\n) => {\n  return (progress: number) => {\n    return {\n      coordinates: endCoordinates.map((coord, index) => {\n        const startCurCoord = coordinates[index];\n        return {\n          ...coord,\n          arg: lerp(startCurCoord.arg, coord.arg, progress),\n          val: lerp(startCurCoord.val, coord.val, progress),\n          startVal: lerp(startCurCoord.startVal, coord.startVal, progress),\n        };\n      }),\n    };\n  };\n};\n\n/** @internal */\nexport const processPieAnimation = (start: PieCoordinates, end: PieCoordinates) => {\n  return (progress: number) => {\n    return {\n      innerRadius: lerp(start.innerRadius, end.innerRadius, progress),\n      outerRadius: lerp(start.outerRadius, end.outerRadius, progress),\n      startAngle: lerp(start.startAngle, end.startAngle, progress),\n      endAngle: lerp(start.endAngle, end.endAngle, progress),\n    };\n  };\n};\n"]},"metadata":{},"sourceType":"module"}